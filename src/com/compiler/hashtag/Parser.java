
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Wed May 20 00:48:14 CST 2015
//----------------------------------------------------

package com.compiler.hashtag;

import java_cup.runtime.*;
import java.util.*;
import java.io.FileReader;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Wed May 20 00:48:14 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\010\006\000\002\010" +
    "\005\000\002\066\002\000\002\010\006\000\002\064\003" +
    "\000\002\002\004\000\002\067\002\000\002\002\005\000" +
    "\002\013\005\000\002\013\004\000\002\070\002\000\002" +
    "\013\006\000\002\003\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\071\002\000\002\004\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\072\002\000\002" +
    "\014\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\060\003\000\002\062\005" +
    "\000\002\062\004\000\002\063\003\000\002\061\005\000" +
    "\002\061\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\052\003\000\002\052\003\000\002\056" +
    "\003\000\002\056\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\015\003\000\002\015\003\000\002\051\006\000\002\051" +
    "\005\000\002\046\005\000\002\046\003\000\002\053\005" +
    "\000\002\053\003\000\002\053\002\000\002\054\004\000" +
    "\002\050\006\000\002\047\003\000\002\047\003\000\002" +
    "\047\002\000\002\011\004\000\002\011\003\000\002\012" +
    "\011\000\002\012\011\000\002\073\002\000\002\012\006" +
    "\000\002\057\004\000\002\057\004\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\007\000\002\074" +
    "\002\000\002\031\006\000\002\035\010\000\002\032\007" +
    "\000\002\075\002\000\002\032\010\000\002\076\002\000" +
    "\002\032\006\000\002\033\007\000\002\033\011\000\002" +
    "\077\002\000\002\033\006\000\002\045\003\000\002\045" +
    "\003\000\002\034\011\000\002\034\011\000\002\100\002" +
    "\000\002\034\006\000\002\037\004\000\002\037\003\000" +
    "\002\040\010\000\002\040\007\000\002\101\002\000\002" +
    "\040\006\000\002\036\003\000\002\036\003\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\003\000" +
    "\002\044\005\000\002\044\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\041\003\000\002\041" +
    "\003\000\002\024\005\000\002\024\003\000\002\025\003" +
    "\000\002\016\005\000\002\016\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\017\003\000\002\017" +
    "\003\000\002\021\004\000\002\021\004\000\002\022\004" +
    "\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\006\003\005\035\006\001\002\000\004\002" +
    "\371\001\002\000\006\003\ufffe\025\ufffe\001\002\000\010" +
    "\003\011\025\010\042\015\001\002\000\006\003\ufffc\025" +
    "\ufffc\001\002\000\006\003\036\041\035\001\002\000\006" +
    "\003\ufffa\041\ufffa\001\002\000\010\003\uffbf\025\uffbf\042" +
    "\015\001\002\000\006\003\011\025\010\001\002\000\004" +
    "\036\357\001\002\000\020\003\021\046\025\047\016\050" +
    "\023\051\017\052\024\060\022\001\002\000\004\065\uffd2" +
    "\001\002\000\004\065\uffcf\001\002\000\004\065\352\001" +
    "\002\000\006\003\uffbc\041\uffbc\001\002\000\004\065\026" +
    "\001\002\000\004\065\uffd1\001\002\000\004\065\uffd0\001" +
    "\002\000\004\065\uffd3\001\002\000\004\021\027\001\002" +
    "\000\020\020\uffc6\023\uffc6\046\025\047\016\050\023\051" +
    "\017\052\024\001\002\000\004\065\072\001\002\000\006" +
    "\020\uffc7\023\uffc7\001\002\000\006\020\034\023\033\001" +
    "\002\000\014\046\025\047\016\050\023\051\017\052\024" +
    "\001\002\000\006\003\036\041\035\001\002\000\036\003" +
    "\071\031\075\032\055\034\044\036\344\037\053\044\046" +
    "\045\070\046\025\047\016\050\023\051\017\052\024\065" +
    "\072\001\002\000\034\003\ufff6\031\ufff6\032\ufff6\034\ufff6" +
    "\037\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\065\ufff6\001\002\000\010\003\uffbe\025\uffbe" +
    "\042\uffbe\001\002\000\034\003\071\031\075\032\055\034" +
    "\044\037\053\044\046\045\070\046\025\047\016\050\023" +
    "\051\017\052\024\065\072\001\002\000\036\003\uffb6\031" +
    "\uffb6\032\uffb6\034\uffb6\036\uffb6\037\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\065\uffb6\001" +
    "\002\000\036\003\071\031\075\032\055\034\044\036\ufff3" +
    "\037\053\044\046\045\070\046\025\047\016\050\023\051" +
    "\017\052\024\065\072\001\002\000\004\024\uffeb\001\002" +
    "\000\006\003\327\021\330\001\002\000\006\017\324\024" +
    "\uffec\001\002\000\022\021\116\061\127\062\134\063\122" +
    "\064\115\065\072\066\126\067\117\001\002\000\004\036" +
    "\321\001\002\000\004\024\uffcd\001\002\000\004\024\uffea" +
    "\001\002\000\004\024\uffd4\001\002\000\006\003\261\021" +
    "\262\001\002\000\036\003\uffb7\031\uffb7\032\uffb7\034\uffb7" +
    "\036\uffb7\037\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\065\uffb7\001\002\000\006\003\246" +
    "\021\247\001\002\000\036\003\uffb4\031\uffb4\032\uffb4\034" +
    "\uffb4\036\uffb4\037\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\065\uffb4\001\002\000\004\024" +
    "\uffce\001\002\000\004\065\072\001\002\000\004\024\244" +
    "\001\002\000\036\003\uffb8\031\uffb8\032\uffb8\034\uffb8\036" +
    "\uffb8\037\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\065\uffb8\001\002\000\012\004\106\005" +
    "\110\017\104\021\232\001\002\000\036\003\uffb3\031\uffb3" +
    "\032\uffb3\034\uffb3\036\uffb3\037\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\065\uffb3\001\002" +
    "\000\036\003\uffb5\031\uffb5\032\uffb5\034\uffb5\036\uffb5\037" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\065\uffb5\001\002\000\004\024\243\001\002\000" +
    "\010\017\uffe3\023\241\024\uffe3\001\002\000\004\021\224" +
    "\001\002\000\036\003\uffee\024\uffe9\031\uffee\032\uffee\034" +
    "\uffee\037\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\065\uffee\001\002\000\046\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\027\uffe0\030\uffe0\001\002\000\036\003\ufff1" +
    "\031\ufff1\032\ufff1\034\ufff1\036\ufff1\037\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\065\ufff1" +
    "\001\002\000\004\024\217\001\002\000\006\003\076\021" +
    "\077\001\002\000\006\003\uffb1\041\uffb1\001\002\000\004" +
    "\046\101\001\002\000\004\020\213\001\002\000\004\065" +
    "\072\001\002\000\004\024\163\001\002\000\010\004\106" +
    "\005\110\017\104\001\002\000\032\021\116\053\132\054" +
    "\121\055\135\056\130\061\127\062\134\063\122\064\115" +
    "\065\072\066\126\067\117\001\002\000\006\020\uff7c\024" +
    "\uff7c\001\002\000\004\004\112\001\002\000\006\020\uff7b" +
    "\024\uff7b\001\002\000\004\005\111\001\002\000\006\020" +
    "\uff79\024\uff79\001\002\000\006\020\uff7a\024\uff7a\001\002" +
    "\000\042\004\uff95\005\uff95\006\154\007\153\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\015\uff95\016\uff95\020\uff95\022\152" +
    "\023\uff95\024\uff95\027\uff95\030\uff95\001\002\000\004\024" +
    "\uffd6\001\002\000\030\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\015\uffd8\016\uffd8\020\uffd8\023\uffd8\024\uffd8\027\uffd8\030" +
    "\uffd8\001\002\000\012\021\116\061\127\062\134\065\072" +
    "\001\002\000\030\010\uffda\011\uffda\012\uffda\013\uffda\015" +
    "\uffda\016\uffda\020\uffda\023\uffda\024\uffda\027\uffda\030\uffda" +
    "\001\002\000\034\004\147\005\150\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\020\uffd7\023\uffd7\024\uffd7" +
    "\027\uffd7\030\uffd7\001\002\000\004\021\145\001\002\000" +
    "\030\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc" +
    "\020\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\001\002\000" +
    "\042\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\015\uff8d\016\uff8d\020\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\027\uff8d\030\uff8d\001\002\000\030\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\020\uffdd\023" +
    "\uffdd\024\uffdd\027\uffdd\030\uffdd\001\002\000\042\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\015\uff8f\016\uff8f\020\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\027\uff8f\030\uff8f\001\002\000\030\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\015\uffd9\016\uffd9\020\uffd9\023\uffd9\024\uffd9" +
    "\027\uffd9\030\uffd9\001\002\000\042\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e" +
    "\016\uff8e\020\uff8e\022\uff8e\023\uff8e\024\uff8e\027\uff8e\030" +
    "\uff8e\001\002\000\004\021\143\001\002\000\004\024\uffd5" +
    "\001\002\000\004\021\141\001\002\000\042\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\015\uff91\016\uff91\020\uff91\022\uff91\023\uff91\024\uff91\027" +
    "\uff91\030\uff91\001\002\000\042\004\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\016" +
    "\uff8c\020\uff8c\022\uff8c\023\uff8c\024\uff8c\027\uff8c\030\uff8c" +
    "\001\002\000\004\021\137\001\002\000\030\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb\020\uffdb\023\uffdb" +
    "\024\uffdb\027\uffdb\030\uffdb\001\002\000\004\020\140\001" +
    "\002\000\004\024\uffe7\001\002\000\004\020\142\001\002" +
    "\000\004\024\uffe5\001\002\000\004\020\144\001\002\000" +
    "\004\024\uffe6\001\002\000\004\020\146\001\002\000\004" +
    "\024\uffe4\001\002\000\012\021\116\061\127\062\134\065" +
    "\072\001\002\000\012\021\116\061\127\062\134\065\072" +
    "\001\002\000\042\004\uff96\005\uff96\006\154\007\153\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\015\uff96\016\uff96\020\uff96" +
    "\022\152\023\uff96\024\uff96\027\uff96\030\uff96\001\002\000" +
    "\012\021\116\061\127\062\134\065\072\001\002\000\012" +
    "\021\116\061\127\062\134\065\072\001\002\000\012\021" +
    "\116\061\127\062\134\065\072\001\002\000\042\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013" +
    "\uff93\015\uff93\016\uff93\020\uff93\022\uff93\023\uff93\024\uff93" +
    "\027\uff93\030\uff93\001\002\000\042\004\uff94\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\015\uff94" +
    "\016\uff94\020\uff94\022\uff94\023\uff94\024\uff94\027\uff94\030" +
    "\uff94\001\002\000\042\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\011\uff92\012\uff92\013\uff92\015\uff92\016\uff92\020" +
    "\uff92\022\uff92\023\uff92\024\uff92\027\uff92\030\uff92\001\002" +
    "\000\042\004\uff97\005\uff97\006\154\007\153\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\015\uff97\016\uff97\020\uff97\022\152" +
    "\023\uff97\024\uff97\027\uff97\030\uff97\001\002\000\010\004" +
    "\147\005\150\020\162\001\002\000\042\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\015" +
    "\uff90\016\uff90\020\uff90\022\uff90\023\uff90\024\uff90\027\uff90" +
    "\030\uff90\001\002\000\024\014\165\021\116\061\127\062" +
    "\134\063\122\064\115\065\072\066\126\067\117\001\002" +
    "\000\016\010\211\011\210\012\203\013\204\015\206\016" +
    "\205\001\002\000\024\014\165\021\116\061\127\062\134" +
    "\063\122\064\115\065\072\066\126\067\117\001\002\000" +
    "\012\020\uff87\024\uff87\027\uff87\030\uff87\001\002\000\012" +
    "\020\uff88\024\uff88\027\uff88\030\uff88\001\002\000\012\020" +
    "\uff8b\024\uff8b\027\176\030\200\001\002\000\004\024\173" +
    "\001\002\000\022\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\020\uff8a\024\uff8a\001\002\000\004\065\072" +
    "\001\002\000\004\020\uffaf\001\002\000\006\004\106\005" +
    "\110\001\002\000\024\014\uff7e\021\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000" +
    "\024\014\165\021\116\061\127\062\134\063\122\064\115" +
    "\065\072\066\126\067\117\001\002\000\024\014\uff7d\021" +
    "\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\067\uff7d\001\002\000\012\020\uff89\024\uff89\027\uff89\030" +
    "\uff89\001\002\000\012\020\uff85\024\uff85\027\uff85\030\uff85" +
    "\001\002\000\022\021\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\066\uff82\067\uff82\001\002\000\022\021\uff81" +
    "\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067" +
    "\uff81\001\002\000\022\021\uff80\061\uff80\062\uff80\063\uff80" +
    "\064\uff80\065\uff80\066\uff80\067\uff80\001\002\000\022\021" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\001\002\000\022\021\116\061\127\062\134\063" +
    "\122\064\115\065\072\066\126\067\117\001\002\000\022" +
    "\021\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\001\002\000\022\021\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\001\002\000" +
    "\012\020\uff86\024\uff86\027\uff86\030\uff86\001\002\000\006" +
    "\003\036\041\035\001\002\000\036\003\uffb2\031\uffb2\032" +
    "\uffb2\034\uffb2\036\uffb2\037\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\065\uffb2\001\002\000" +
    "\006\003\036\041\035\001\002\000\036\003\uffb0\031\uffb0" +
    "\032\uffb0\034\uffb0\036\uffb0\037\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\065\uffb0\001\002" +
    "\000\036\003\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0\037" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\065\ufff0\001\002\000\034\003\071\031\075\032" +
    "\055\034\044\037\053\044\046\045\070\046\025\047\016" +
    "\050\023\051\017\052\024\065\072\001\002\000\004\024" +
    "\222\001\002\000\004\024\uffe8\001\002\000\036\003\uffed" +
    "\031\uffed\032\uffed\034\uffed\036\uffed\037\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\065\uffed" +
    "\001\002\000\016\020\uffc1\021\116\061\127\062\134\064" +
    "\115\065\072\001\002\000\004\020\uffc2\001\002\000\004" +
    "\020\uffc3\001\002\000\022\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\020\uff8d\021\232\022\uff8d\024\uff8d\001\002\000\004" +
    "\020\231\001\002\000\004\024\uffc4\001\002\000\024\020" +
    "\234\021\116\061\127\062\134\063\122\064\115\065\072" +
    "\066\126\067\117\001\002\000\006\020\uffc9\023\237\001" +
    "\002\000\006\020\uffcb\024\uffcb\001\002\000\004\020\236" +
    "\001\002\000\006\020\uffcc\024\uffcc\001\002\000\022\021" +
    "\116\061\127\062\134\063\122\064\115\065\072\066\126" +
    "\067\117\001\002\000\004\020\uffca\001\002\000\004\065" +
    "\072\001\002\000\010\017\uffe2\023\uffe2\024\uffe2\001\002" +
    "\000\036\003\uffef\031\uffef\032\uffef\034\uffef\036\uffef\037" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\065\uffef\001\002\000\036\003\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\036\ufff2\037\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\065\ufff2\001\002\000" +
    "\010\017\uffe1\023\uffe1\024\uffe1\001\002\000\006\003\uffa7" +
    "\041\uffa7\001\002\000\024\014\165\021\116\061\127\062" +
    "\134\063\122\064\115\065\072\066\126\067\117\001\002" +
    "\000\032\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\015\uff8d\016\uff8d\020\uffa4\022\uff8d" +
    "\001\002\000\004\020\253\001\002\000\004\020\uffa5\001" +
    "\002\000\006\003\036\041\035\001\002\000\040\003\uffa9" +
    "\031\uffa9\032\uffa9\033\255\034\uffa9\036\uffa9\037\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\065\uffa9\001\002\000\006\003\036\041\035\001\002\000" +
    "\036\003\uffa8\031\uffa8\032\uffa8\034\uffa8\036\uffa8\037\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\065\uffa8\001\002\000\006\003\036\041\035\001\002" +
    "\000\036\003\uffa6\031\uffa6\032\uffa6\034\uffa6\036\uffa6\037" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\065\uffa6\001\002\000\006\040\uffa1\057\uffa1\001" +
    "\002\000\010\061\263\063\265\065\072\001\002\000\006" +
    "\020\uff99\026\uff99\001\002\000\004\020\313\001\002\000" +
    "\006\020\uff98\026\uff98\001\002\000\004\020\267\001\002" +
    "\000\004\041\270\001\002\000\006\040\274\057\271\001" +
    "\002\000\004\026\307\001\002\000\004\036\306\001\002" +
    "\000\042\003\uff9e\031\uff9e\032\uff9e\034\uff9e\036\uff9e\037" +
    "\uff9e\040\274\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\057\271\065\uff9e\001\002\000\010\003" +
    "\276\061\263\063\265\001\002\000\004\026\301\001\002" +
    "\000\006\003\uff9b\041\uff9b\001\002\000\006\003\036\041" +
    "\035\001\002\000\042\003\uff9a\031\uff9a\032\uff9a\034\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\057\uff9a\065\uff9a\001\002" +
    "\000\006\003\036\041\035\001\002\000\004\043\303\001" +
    "\002\000\004\024\304\001\002\000\042\003\uff9d\031\uff9d" +
    "\032\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\057\uff9d" +
    "\065\uff9d\001\002\000\036\003\uff9f\031\uff9f\032\uff9f\034" +
    "\uff9f\036\uff9f\037\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\065\uff9f\001\002\000\036\003" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\036\uffa3\037\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\065" +
    "\uffa3\001\002\000\006\003\036\041\035\001\002\000\004" +
    "\043\311\001\002\000\004\024\312\001\002\000\042\003" +
    "\uff9c\031\uff9c\032\uff9c\034\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\057\uff9c\065\uff9c\001\002\000\004\041\314\001\002" +
    "\000\006\040\274\057\271\001\002\000\004\036\316\001" +
    "\002\000\036\003\uffa2\031\uffa2\032\uffa2\034\uffa2\036\uffa2" +
    "\037\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\065\uffa2\001\002\000\006\040\274\057\271" +
    "\001\002\000\036\003\uffa0\031\uffa0\032\uffa0\034\uffa0\036" +
    "\uffa0\037\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\065\uffa0\001\002\000\052\003\ufff5\025" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\057\ufff5\065\ufff5\001\002" +
    "\000\004\024\uffba\001\002\000\004\024\uffb9\001\002\000" +
    "\032\021\116\053\132\054\121\055\135\056\130\061\127" +
    "\062\134\063\122\064\115\065\072\066\126\067\117\001" +
    "\002\000\004\024\uffdf\001\002\000\004\024\uffde\001\002" +
    "\000\006\003\uffab\041\uffab\001\002\000\026\014\165\020" +
    "\331\021\116\061\127\062\134\063\122\064\115\065\072" +
    "\066\126\067\117\001\002\000\004\003\335\001\002\000" +
    "\004\020\333\001\002\000\006\003\036\041\035\001\002" +
    "\000\036\003\uffae\031\uffae\032\uffae\034\uffae\036\uffae\037" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\065\uffae\001\002\000\006\003\uffad\041\uffad\001" +
    "\002\000\006\003\036\041\035\001\002\000\036\003\uffac" +
    "\031\uffac\032\uffac\034\uffac\036\uffac\037\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\065\uffac" +
    "\001\002\000\006\003\036\041\035\001\002\000\036\003" +
    "\uffaa\031\uffaa\032\uffaa\034\uffaa\036\uffaa\037\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\065" +
    "\uffaa\001\002\000\004\036\ufff4\001\002\000\004\036\345" +
    "\001\002\000\052\003\ufff7\025\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\057\ufff7\065\ufff7\001\002\000\052\003\ufff8\025\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\057\ufff8\065\ufff8\001\002\000" +
    "\006\020\uffc8\023\uffc8\001\002\000\006\020\uffc5\023\uffc5" +
    "\001\002\000\006\003\036\041\035\001\002\000\010\003" +
    "\uffbb\025\uffbb\042\uffbb\001\002\000\004\021\353\001\002" +
    "\000\020\020\uffc6\023\uffc6\046\025\047\016\050\023\051" +
    "\017\052\024\001\002\000\006\020\355\023\033\001\002" +
    "\000\006\003\036\041\035\001\002\000\010\003\uffbd\025" +
    "\uffbd\042\uffbd\001\002\000\004\002\uffff\001\002\000\004" +
    "\036\361\001\002\000\004\002\000\001\002\000\006\003" +
    "\uffc0\025\uffc0\001\002\000\006\003\036\041\035\001\002" +
    "\000\004\036\ufff9\001\002\000\004\036\ufffb\001\002\000" +
    "\006\003\011\025\010\001\002\000\004\036\370\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\066\365\001\001\000\012\002\013\011\006\012\011" +
    "\064\012\001\001\000\002\001\001\000\004\013\364\001" +
    "\001\000\004\067\362\001\001\000\006\011\361\012\011" +
    "\001\001\000\004\002\357\001\001\000\002\001\001\000" +
    "\004\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\027\053\031\054\030\001" +
    "\001\000\004\063\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\027\054\345\001\001\000\004\013" +
    "\036\001\001\000\054\003\342\004\041\005\057\006\073" +
    "\014\060\015\050\021\051\026\072\027\061\030\053\031" +
    "\040\032\064\033\055\034\063\050\056\051\047\057\065" +
    "\060\044\061\042\062\066\063\062\001\001\000\004\070" +
    "\037\001\001\000\002\001\001\000\054\003\046\004\041" +
    "\005\057\006\073\014\060\015\050\021\051\026\072\027" +
    "\061\030\053\031\040\032\064\033\055\034\063\050\056" +
    "\051\047\057\065\060\044\061\042\062\066\063\062\001" +
    "\001\000\002\001\001\000\054\003\341\004\041\005\057" +
    "\006\073\014\060\015\050\021\051\026\072\027\061\030" +
    "\053\031\040\032\064\033\055\034\063\050\056\051\047" +
    "\057\065\060\044\061\042\062\066\063\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\322\042\117\043\112\044\132\051\321\052\135\055" +
    "\124\056\123\063\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\104\023\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\217\072\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\214\001\001\000\004" +
    "\035\077\001\001\000\002\001\001\000\010\006\101\021" +
    "\051\063\102\001\001\000\002\001\001\000\006\022\104" +
    "\023\106\001\001\000\024\007\113\042\117\043\112\044" +
    "\132\052\135\055\124\056\123\063\122\065\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\042" +
    "\160\043\112\044\132\055\124\063\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\043\157\044\132\055\124\063\122" +
    "\001\001\000\012\043\150\044\132\055\124\063\122\001" +
    "\001\000\002\001\001\000\010\044\156\055\124\063\122" +
    "\001\001\000\010\044\155\055\124\063\122\001\001\000" +
    "\010\044\154\055\124\063\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\163\016\165" +
    "\024\167\025\166\041\170\042\117\043\112\044\132\052" +
    "\171\055\124\056\123\063\122\001\001\000\004\020\206" +
    "\001\001\000\024\007\163\016\201\042\117\043\112\044" +
    "\132\052\135\055\124\056\123\063\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\173\063\174" +
    "\001\001\000\002\001\001\000\006\022\104\023\106\001" +
    "\001\000\002\001\001\000\026\007\163\016\165\025\200" +
    "\042\117\043\112\044\132\052\135\055\124\056\123\063" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\211\042\117\043\112" +
    "\044\132\052\135\055\124\056\123\063\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\213\001\001\000\002\001\001\000\004\013\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\222" +
    "\005\057\006\073\014\060\015\050\021\051\026\072\027" +
    "\061\030\053\031\040\032\064\033\055\034\063\050\056" +
    "\051\047\057\065\060\044\061\042\062\066\063\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\042\117\043\112\044\132\047\227\051\224\055" +
    "\124\056\225\063\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\232\042\117\043\112\044\132\046\234" +
    "\052\135\055\124\056\123\063\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\232\042\117\043\112\044\132\046\237\052" +
    "\135\055\124\056\123\063\122\001\001\000\002\001\001" +
    "\000\004\063\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\256" +
    "\001\001\000\034\007\163\016\165\024\167\025\166\041" +
    "\251\042\117\043\112\044\132\045\250\052\171\055\124" +
    "\056\123\063\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\253\001\001\000\002" +
    "\001\001\000\004\013\255\001\001\000\002\001\001\000" +
    "\004\013\257\001\001\000\002\001\001\000\004\100\316" +
    "\001\001\000\006\036\263\063\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\271\040\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\304\040\272" +
    "\001\001\000\004\036\274\001\001\000\002\001\001\000" +
    "\004\101\276\001\001\000\004\013\277\001\001\000\002" +
    "\001\001\000\004\013\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\314\040\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\317\040\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\324\042\117\043\112\044\132\052\135\055\124" +
    "\056\123\063\122\065\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\337\001\001\000\034\007\163" +
    "\016\165\024\167\025\166\041\251\042\117\043\112\044" +
    "\132\045\331\052\171\055\124\056\123\063\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\333\001" +
    "\001\000\002\001\001\000\004\075\335\001\001\000\004" +
    "\013\336\001\001\000\002\001\001\000\004\013\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\027\053\353\054\030\001" +
    "\001\000\002\001\001\000\004\013\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Node root = null;
    public int errors = 0;
    public int fatal = 0;
    //Lexer lexer = (Lexer) this.getScanner();

    public JavaSymbol getCurrentSymbol() {
        return (JavaSymbol) this.cur_token;
    }

    public void report_error(String message, Object info){
        StringBuilder m = new StringBuilder("");
        if(info instanceof java_cup.runtime.Symbol){
            m.append("Error: ");
            m.append(info);
            m.append(" : " + message);
        } else {
            if (info instanceof String) {
                errors++;
                m.append("    "+ errors + "==> " + info + " "+ message+"\n");
            }
        }
        Editor.console.setText(Editor.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
        fatal++;
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Functions Main END 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", f, mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= BEGIN Main END 
            {
              Node RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Node RESULT =null;
 parser.report_error("syntax. Missing token 'begin'.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error NT$0 Main END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FUNCTIONS",fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Main ::= MAINBEGIN Stmts 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("MAIN",st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Node RESULT =null;
 parser.report_error("token 'mainbegin'.","MISSING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Main ::= error NT$1 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmts ::= DO BodyList END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmts ::= DO END 
            {
              Node RESULT =null;
		 RESULT = new Node("?"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Node RESULT =null;
 parser.report_error("block declaration syntax. Unmatched 'do' 'end' tokens.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmts ::= error NT$2 BodyList END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BodyList ::= BodyPart BodyList 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bdl.add(bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BodyList ::= BodyPart 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body", bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BodyPart ::= Instruccion PUNTOCOMA 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BodyPart ::= Bloque 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BodyPart ::= Asignacion PUNTOCOMA 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BodyPart ::= Return PUNTOCOMA 
            {
              Node RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ret = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ret; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Node RESULT =null;
 parser.report_error("start of expression.","ILLEGAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BodyPart ::= error NT$3 BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruccion ::= VarDeclare 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruccion ::= VarInit 
            {
              Node RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= Llamado 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Node RESULT =null;
 parser.report_error("variable initialization, declaration or function call","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= error NT$4 PUNTOCOMA 
            {
              Node RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lectura ::= READINT PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READINT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lectura ::= READDOUBLE PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READDOUBLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lectura ::= READSTRING PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READSTRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lectura ::= READCHAR PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READCHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDeclare ::= VarDeclarationList 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = vdl;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclare",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDeclarationList ::= VarDeclarationList COMA Identifier 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    iden.getData().setType(vdl.getData().getType());
                                    RESULT = vdl.add(iden);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarDeclarationList ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    iden.getData().setType(tp.label); //habria que hacer clase Tipo propia?
                                    RESULT = new Node("declare", iden);
                                    RESULT.getData().setType(tp.label); //temporal solution so that every child of "declare" updates their type
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Identifier ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "IDENTIFIER", null, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, id);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarInit ::= VarDeclare ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    for (Node declared: vd.getChildren()) {
                                        declared.getData().setValue(av.getData().getValue());
                                    }
                                    RESULT = new Node("init",vd,av);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarInit ::= VarDeclare ASIGNACION Lectura 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("init",vd,lec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AsigValor ::= Cadena 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AsigValor ::= CARACTER 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "CHARACTER", ch, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, ("'").concat(Character.toString(ch)).concat("'"));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AsigValor ::= Boolean 
            {
              Node RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bool = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = bool;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Boolean ::= TRUE 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "TRUE", new Boolean(true), symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, "true");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Boolean ::= FALSE 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "FALSE", new Boolean(false), symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, "false");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Cadena ::= CADENA 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "STRING", cad, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat,"\""+cad+"\"");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Cadena ::= ExpresionAritmetica 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Asignacion ::= Identifier ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden, av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Asignacion ::= Identifier ASIGNACION Lectura 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden, lec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Asignacion ::= ExpresionIncDec 
            {
              Node RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = update; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Type ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Node("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Type ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new Node("double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Type ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new Node("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= BOOLEAN 
            {
              Node RESULT =null;
		 RESULT = new Node("boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= STRING 
            {
              Node RESULT =null;
		 RESULT = new Node("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Llamado ::= Print 
            {
              Node RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Llamado ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LlamadoMetodos ::= Identifier PARIZQ Contenido PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("function_call",id,cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LlamadoMetodos ::= Identifier PARIZQ PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("function_call", id, new Node("params",new Node("?"))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Contenido ::= AsigValor COMA Contenido 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cont.add(av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Contenido ::= AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params",av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Parametros ::= Parametros COMA Param 
            {
              Node RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ps = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ps.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parametros ::= Param 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("parameters",p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Parametros ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("?"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Param ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = id;
                                    RESULT.getData().setType(tp.label);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Print ::= PRINT PARIZQ PrintParam PARDER 
            {
              Node RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PRINT", pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrintParam ::= Cadena 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cad = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrintParam ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrintParam ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("?"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FunctionList ::= FunctionPart FunctionList 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.add(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunctionList ::= FunctionPart 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunctionPart ::= FUNCTION VOID IDENTIFICADOR PARIZQ Parametros PARDER Stmts 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id, param, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunctionPart ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER Stmts 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id, param, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$5 ::= 
            {
              Node RESULT =null;

                                            parser.report_error("function declaration. Usage example: function <type> <id> () do ... end","WRONG");
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FunctionPart ::= FUNCTION error NT$5 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Return ::= RETURN LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN",lm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Return ::= RETURN AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN", av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Bloque ::= Loops 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Bloque ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Loops ::= ForLoop 
            {
              Node RESULT =null;
		int flpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node flp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = flp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Loops ::= WhileLoop 
            {
              Node RESULT =null;
		int wlpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wlp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wlp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Conditional ::= IfConditional 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Conditional ::= SwitchConditional 
            {
              Node RESULT =null;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node swc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = swc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ForLoop ::= FOR PARIZQ ExprFor PARDER Stmts 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FOR", expr, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$6 ::= 
            {
              Node RESULT =null;
 parser.report_error("FOR statement declaration","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ForLoop ::= FOR error NT$6 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExprFor ::= INT Asignacion PUNTOCOMA ExpresionBooleana PUNTOCOMA ExpresionIncDec 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exprb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("structure",asig,exprb,update); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprFor",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WhileLoop ::= WHILE PARIZQ Conditions PARDER Stmts 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("WHILE", cond, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$7 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration, missing boolean expression.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WhileLoop ::= WHILE PARIZQ PARDER error NT$7 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$8 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration. Usage example:\n\n\twhile (<boolean expression>) do \n\t\t...\n\tend","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WhileLoop ::= WHILE error NT$8 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IfConditional ::= IF PARIZQ Conditions PARDER Stmts 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cond, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IfConditional ::= IF PARIZQ Conditions PARDER Stmts ELSE Stmts 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cond,st1,new Node("ELSE",st2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$9 ::= 
            {
              Node RESULT =null;
 parser.report_error("IF statement declaration. Usage example:\n\n\tif (<boolean expression>) do \n\t\t...\n\tend", "WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IfConditional ::= IF error NT$9 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Conditions ::= ExpresionBooleana 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditions",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Conditions ::= Identifier 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditions",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SwitchConditional ::= SWITCH PARIZQ Identifier PARDER DO ExprSwitchList END 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", id, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SwitchConditional ::= SWITCH PARIZQ Switch PARDER DO ExprSwitchList END 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", sw, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$10 ::= 
            {
              Node RESULT =null;
parser.report_error("SWITCH statement declaration.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SwitchConditional ::= SWITCH error NT$10 ExprSwitchList 
            {
              Node RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExprSwitchList ::= ExprSwitchPart ExprSwitchList 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprl.add(exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprSwitchList ::= ExprSwitchPart 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprSwitchPart ::= CASE Switch DOSPUNTOS Stmts BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("CASE", sw, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExprSwitchPart ::= OTHER DOSPUNTOS Stmts BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("OTHER", st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$11 ::= 
            {
              Node RESULT =null;
parser.report_error("CASE syntax in SWITCH statement.","WRONG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprSwitchPart ::= CASE error NT$11 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Switch ::= NUMERO 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Switch ::= CARACTER 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Character.toString(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionAritmetica ::= ExpresionAritmetica SUMA Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("+",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionAritmetica ::= ExpresionAritmetica MENOS Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("-",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionAritmetica ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Factor MULT Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("*",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= Factor DIV Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("/",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Factor MOD Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("%",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Term ::= PARIZQ ExpresionAritmetica PARDER 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Term ::= Valor 
            {
              Node RESULT =null;
		int vlrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vlr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vlr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Valor ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "NUMBER", num, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Integer.toString(num));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Valor ::= Identifier 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Valor ::= REAL 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "REAL", r, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Double.toString(r));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpresionBooleana ::= BooleanExprList 
            {
              Node RESULT =null;
		int belleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int belright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpresionBooleana ::= Boolean 
            {
              Node RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bool = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BooleanExprList ::= BooleanExprList LogicalOper BooleanExprPart 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node part = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list.add(part); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BooleanExprList ::= BooleanExprPart 
            {
              Node RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node part = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("conditions",part); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BooleanExprPart ::= ExpresionComparacion 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprPart",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionComparacion ::= AsigValor RelationalOper AsigValor 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(oprel.label, v1, v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionComparacion ::= NOT ExpresionComparacion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("negation", exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // RelationalOper ::= MAYOR 
            {
              Node RESULT =null;
		 RESULT = new Node(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RelationalOper ::= MENOR 
            {
              Node RESULT =null;
		 RESULT = new Node("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // RelationalOper ::= MAYORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // RelationalOper ::= MENORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // RelationalOper ::= IGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // RelationalOper ::= DIFERENTE 
            {
              Node RESULT =null;
		 RESULT = new Node("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LogicalOper ::= AND 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LogicalOper ::= OR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ExpresionIncDec ::= Identifier Incremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("increase", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ExpresionIncDec ::= Identifier Decremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("decrease", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

