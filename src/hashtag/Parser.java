
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Tue Mar 10 17:01:49 CST 2015
//----------------------------------------------------

package hashtag;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Tue Mar 10 17:01:49 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\014\006\000\002\002" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\016\003\000\002\016\003\000" +
    "\002\004\005\000\002\013\003\000\002\013\003\000\002" +
    "\005\003\000\002\006\005\000\002\006\002\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\051\003\000" +
    "\002\051\003\000\002\055\003\000\002\055\003\000\002" +
    "\007\004\000\002\011\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\017\003\000\002\017\003\000\002\050\005\000" +
    "\002\052\005\000\002\052\004\000\002\052\002\000\002" +
    "\053\004\000\002\047\006\000\002\015\014\000\002\015" +
    "\002\000\002\027\004\000\002\027\004\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\010\000\002\036\007\000\002\033\010\000\002" +
    "\034\010\000\002\035\010\000\002\040\011\000\002\040" +
    "\005\000\002\041\003\000\002\041\003\000\002\020\003" +
    "\000\002\020\003\000\002\043\005\000\002\043\005\000" +
    "\002\043\003\000\002\045\005\000\002\045\005\000\002" +
    "\045\003\000\002\046\005\000\002\046\003\000\002\042" +
    "\004\000\002\042\003\000\002\042\003\000\002\037\005" +
    "\000\002\037\004\000\002\021\005\000\002\021\004\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\022" +
    "\003\000\002\022\003\000\002\024\004\000\002\024\004" +
    "\000\002\025\004\000\002\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\045\005\001\002\000\004\002\243\001" +
    "\002\000\006\034\uffd8\055\007\001\002\000\004\034\236" +
    "\001\002\000\014\072\015\073\010\074\013\075\011\076" +
    "\014\001\002\000\004\021\uffe5\001\002\000\004\021\uffe2" +
    "\001\002\000\004\021\016\001\002\000\004\021\uffe4\001" +
    "\002\000\004\021\uffe3\001\002\000\004\021\uffe6\001\002" +
    "\000\004\023\017\001\002\000\016\022\uffdc\072\015\073" +
    "\010\074\013\075\011\076\014\001\002\000\004\021\232" +
    "\001\002\000\004\022\022\001\002\000\004\052\023\001" +
    "\002\000\032\021\044\040\047\041\032\044\025\046\ufffb" +
    "\050\030\060\043\072\015\073\010\074\013\075\011\076" +
    "\014\001\002\000\004\046\uffd5\001\002\000\004\023\225" +
    "\001\002\000\004\026\ufff9\001\002\000\004\026\uffe0\001" +
    "\002\000\004\023\204\001\002\000\004\046\203\001\002" +
    "\000\004\023\176\001\002\000\004\046\uffd3\001\002\000" +
    "\004\026\uffe1\001\002\000\004\021\166\001\002\000\004" +
    "\026\164\001\002\000\004\046\163\001\002\000\004\046" +
    "\uffd2\001\002\000\004\046\uffd4\001\002\000\004\046\161" +
    "\001\002\000\004\023\156\001\002\000\006\017\151\023" +
    "\152\001\002\000\036\021\044\040\047\041\032\044\025" +
    "\046\ufffb\047\ufffb\050\030\056\ufffb\060\043\072\015\073" +
    "\010\074\013\075\011\076\014\001\002\000\004\026\147" +
    "\001\002\000\004\023\051\001\002\000\004\026\ufffa\001" +
    "\002\000\014\072\015\073\010\074\013\075\011\076\014" +
    "\001\002\000\004\026\057\001\002\000\004\022\054\001" +
    "\002\000\004\052\055\001\002\000\032\021\044\040\047" +
    "\041\032\044\025\046\ufffb\050\030\060\043\072\015\073" +
    "\010\074\013\075\011\076\014\001\002\000\004\046\uffd1" +
    "\001\002\000\024\014\063\021\077\023\064\053\066\054" +
    "\075\061\076\062\101\063\062\064\071\001\002\000\046" +
    "\004\uffc4\005\uffc4\006\107\007\106\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\026\uffc4\036\uffc4\037\uffc4\061\uffc4\062\uffc4\001\002\000" +
    "\016\010\145\011\144\012\140\013\137\015\143\016\142" +
    "\001\002\000\026\010\uffea\011\uffea\012\uffea\013\uffea\015" +
    "\uffea\016\uffea\022\uffea\026\uffea\036\uffea\037\uffea\001\002" +
    "\000\024\014\063\021\077\023\064\053\066\054\075\061" +
    "\076\062\101\063\062\064\071\001\002\000\012\021\077" +
    "\023\064\061\076\062\101\001\002\000\004\026\123\001" +
    "\002\000\026\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec" +
    "\016\uffec\022\uffec\026\uffec\036\uffec\037\uffec\001\002\000" +
    "\012\022\uffbd\026\uffbd\036\113\037\116\001\002\000\024" +
    "\004\103\005\104\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\026\uffc7\001\002\000\026\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\015\uffee\016\uffee\022\uffee\026\uffee\036" +
    "\uffee\037\uffee\001\002\000\026\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\015\uffef\016\uffef\022\uffef\026\uffef\036\uffef\037" +
    "\uffef\001\002\000\046\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\026\uffbf\036\uffbf\037\uffbf\061\uffbf" +
    "\062\uffbf\001\002\000\022\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\022\uffbc\026\uffbc\001\002\000\026" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\022" +
    "\uffeb\026\uffeb\036\uffeb\037\uffeb\001\002\000\046\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2\026\ufff2" +
    "\036\ufff2\037\ufff2\061\ufff2\062\ufff2\001\002\000\046\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1\026" +
    "\ufff1\036\ufff1\037\ufff1\061\ufff1\062\ufff1\001\002\000\046" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\026\uffc1\036\uffc1\037\uffc1\061\uffc1\062\uffc1\001\002\000" +
    "\046\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\026\ufff0\036\ufff0\037\ufff0\061\ufff0\062\ufff0\001\002" +
    "\000\004\026\uffc8\001\002\000\012\021\077\023\064\061" +
    "\076\062\101\001\002\000\012\021\077\023\064\061\076" +
    "\062\101\001\002\000\046\004\uffc5\005\uffc5\006\107\007" +
    "\106\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\026\uffc5\036\uffc5\037\uffc5\061" +
    "\uffc5\062\uffc5\001\002\000\012\021\077\023\064\061\076" +
    "\062\101\001\002\000\012\021\077\023\064\061\076\062" +
    "\101\001\002\000\046\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\036\uffc2\037\uffc2\061\uffc2" +
    "\062\uffc2\001\002\000\046\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\026\uffc3\036\uffc3\037\uffc3\061" +
    "\uffc3\062\uffc3\001\002\000\046\004\uffc6\005\uffc6\006\107" +
    "\007\106\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\036\uffc6\037\uffc6" +
    "\061\uffc6\062\uffc6\001\002\000\024\014\uffb1\021\uffb1\023" +
    "\uffb1\053\uffb1\054\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\001\002\000\024\014\063\021\077\023\064\053\066\054" +
    "\075\061\076\062\101\063\062\064\071\001\002\000\006" +
    "\022\uffbe\026\uffbe\001\002\000\024\014\uffb0\021\uffb0\023" +
    "\uffb0\053\uffb0\054\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\001\002\000\026\010\uffed\011\uffed\012\uffed\013\uffed\015" +
    "\uffed\016\uffed\022\uffed\026\uffed\036\uffed\037\uffed\001\002" +
    "\000\012\022\uffba\026\uffba\036\113\037\116\001\002\000" +
    "\032\004\103\005\104\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\015\uffe9\016\uffe9\022\uffe9\026\uffe9\036\uffe9\037\uffe9\001" +
    "\002\000\006\022\uffbb\026\uffbb\001\002\000\004\021\124" +
    "\001\002\000\006\004\130\005\131\001\002\000\004\022" +
    "\uffd0\001\002\000\004\022\uffaf\001\002\000\004\022\uffae" +
    "\001\002\000\004\004\133\001\002\000\004\005\132\001" +
    "\002\000\004\022\uffac\001\002\000\004\022\uffad\001\002" +
    "\000\016\004\103\005\104\021\077\023\064\061\076\062" +
    "\101\001\002\000\046\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\026\uffc0\036\uffc0\037\uffc0\061\uffc0" +
    "\062\uffc0\001\002\000\012\022\uffb8\026\uffb8\036\uffb8\037" +
    "\uffb8\001\002\000\022\021\uffb4\023\uffb4\053\uffb4\054\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\001\002\000\022\021" +
    "\uffb5\023\uffb5\053\uffb5\054\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\001\002\000\022\021\077\023\064\053\066\054" +
    "\075\061\076\062\101\063\062\064\071\001\002\000\022" +
    "\021\uffb3\023\uffb3\053\uffb3\054\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\001\002\000\022\021\uffb2\023\uffb2\053\uffb2" +
    "\054\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001\002\000" +
    "\022\021\uffb6\023\uffb6\053\uffb6\054\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\001\002\000\022\021\uffb7\023\uffb7\053" +
    "\uffb7\054\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002" +
    "\000\012\022\uffb9\026\uffb9\036\uffb9\037\uffb9\001\002\000" +
    "\010\046\ufffc\047\ufffc\056\ufffc\001\002\000\010\046\ufffd" +
    "\047\ufffd\056\ufffd\001\002\000\022\021\077\023\064\053" +
    "\066\054\075\061\076\062\101\063\062\064\071\001\002" +
    "\000\004\022\154\001\002\000\004\026\uffe7\001\002\000" +
    "\004\026\uffdf\001\002\000\004\026\uffe8\001\002\000\022" +
    "\021\077\023\064\053\066\054\075\061\076\062\101\063" +
    "\062\064\071\001\002\000\004\022\160\001\002\000\004" +
    "\026\uffda\001\002\000\006\034\uffd8\055\007\001\002\000" +
    "\004\034\uffd9\001\002\000\036\021\uffd7\040\uffd7\041\uffd7" +
    "\044\uffd7\046\uffd7\047\uffd7\050\uffd7\056\uffd7\060\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\001\002\000\036" +
    "\021\044\040\047\041\032\044\025\046\ufffb\047\ufffb\050" +
    "\030\056\ufffb\060\043\072\015\073\010\074\013\075\011" +
    "\076\014\001\002\000\010\046\ufffe\047\ufffe\056\ufffe\001" +
    "\002\000\010\017\151\025\170\026\ufff3\001\002\000\004" +
    "\026\ufff6\001\002\000\004\021\174\001\002\000\004\026" +
    "\ufff7\001\002\000\004\026\ufff5\001\002\000\004\026\ufff8" +
    "\001\002\000\006\025\170\026\ufff3\001\002\000\004\026" +
    "\ufff4\001\002\000\024\014\063\021\077\023\064\053\066" +
    "\054\075\061\076\062\101\063\062\064\071\001\002\000" +
    "\004\022\200\001\002\000\004\052\201\001\002\000\032" +
    "\021\044\040\047\041\032\044\025\046\ufffb\050\030\060" +
    "\043\072\015\073\010\074\013\075\011\076\014\001\002" +
    "\000\004\046\uffce\001\002\000\036\021\uffd6\040\uffd6\041" +
    "\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\056\uffd6\060\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\001\002\000" +
    "\004\021\205\001\002\000\004\022\206\001\002\000\004" +
    "\052\207\001\002\000\006\051\212\071\210\001\002\000" +
    "\004\035\223\001\002\000\004\046\uffcd\001\002\000\006" +
    "\061\213\064\215\001\002\000\004\035\uffca\001\002\000" +
    "\004\035\216\001\002\000\004\035\uffc9\001\002\000\032" +
    "\021\044\040\047\041\032\044\025\050\030\056\ufffb\060" +
    "\043\072\015\073\010\074\013\075\011\076\014\001\002" +
    "\000\004\056\220\001\002\000\004\026\221\001\002\000" +
    "\006\051\212\071\210\001\002\000\004\046\uffcc\001\002" +
    "\000\032\021\044\040\047\041\032\044\025\046\ufffb\050" +
    "\030\060\043\072\015\073\010\074\013\075\011\076\014" +
    "\001\002\000\004\046\uffcb\001\002\000\024\014\063\021" +
    "\077\023\064\053\066\054\075\061\076\062\101\063\062" +
    "\064\071\001\002\000\004\022\227\001\002\000\004\052" +
    "\230\001\002\000\032\021\044\040\047\041\032\044\025" +
    "\046\ufffb\050\030\060\043\072\015\073\010\074\013\075" +
    "\011\076\014\001\002\000\004\046\uffcf\001\002\000\006" +
    "\022\uffdd\025\233\001\002\000\016\022\uffdc\072\015\073" +
    "\010\074\013\075\011\076\014\001\002\000\004\022\uffde" +
    "\001\002\000\004\022\uffdb\001\002\000\032\021\044\040" +
    "\047\041\032\044\025\047\ufffb\050\030\060\043\072\015" +
    "\073\010\074\013\075\011\076\014\001\002\000\004\046" +
    "\240\001\002\000\004\002\000\001\002\000\004\047\242" +
    "\001\002\000\004\046\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\014\003\001\001\000\002\001\001\000" +
    "\004\015\005\001\001\000\004\002\236\001\001\000\004" +
    "\010\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\017\052\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\041\004\047\010\034\011\045\016\035\017" +
    "\025\027\044\030\036\031\030\032\023\033\040\034\032" +
    "\035\037\047\033\050\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\152\001\001" +
    "\000\040\003\147\004\047\010\034\011\045\016\035\017" +
    "\025\027\044\030\036\031\030\032\023\033\040\034\032" +
    "\035\037\047\033\050\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\051\010\034" +
    "\036\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\055\004\047\010\034\011\045" +
    "\016\035\017\025\027\044\030\036\031\030\032\023\033" +
    "\040\034\032\035\037\047\033\050\026\001\001\000\002" +
    "\001\001\000\026\012\060\020\064\021\066\042\101\043" +
    "\067\045\057\046\077\051\073\054\072\055\071\001\001" +
    "\000\002\001\001\000\004\023\140\001\001\000\002\001" +
    "\001\000\022\012\060\021\135\043\120\045\057\046\077" +
    "\051\116\054\072\055\071\001\001\000\012\043\133\045" +
    "\057\046\077\054\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\113\037\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\111\046\077\054\072\001\001\000" +
    "\010\045\104\046\077\054\072\001\001\000\002\001\001" +
    "\000\006\046\110\054\072\001\001\000\006\046\107\054" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\060\021\117\043" +
    "\120\045\057\046\077\051\116\054\072\055\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\113\037\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\124\001\001\000\006\025\125\026" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\134\054\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\145\043\120\045\057\046\077" +
    "\051\116\054\072\055\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\154\043\120\045\057\046\077\051\116\054\072\055\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\156\043\120\045\057" +
    "\046\077\051\116\054\072\055\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\164\004\047\010" +
    "\034\011\045\016\035\017\025\027\044\030\036\031\030" +
    "\032\023\033\040\034\032\035\037\047\033\050\026\001" +
    "\001\000\002\001\001\000\012\005\170\006\166\007\171" +
    "\013\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\174\001\001\000\002\001\001\000\024\012\060\021" +
    "\066\042\176\043\120\045\057\046\077\051\073\054\072" +
    "\055\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\201\004\047\010\034\011\045\016\035\017\025" +
    "\027\044\030\036\031\030\032\023\033\040\034\032\035" +
    "\037\047\033\050\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\216\004\047" +
    "\010\034\011\045\016\035\017\025\027\044\030\036\031" +
    "\030\032\023\033\040\034\032\035\037\047\033\050\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\221\001\001\000\002\001\001\000\040\003\223\004\047" +
    "\010\034\011\045\016\035\017\025\027\044\030\036\031" +
    "\030\032\023\033\040\034\032\035\037\047\033\050\026" +
    "\001\001\000\002\001\001\000\024\012\060\021\066\042" +
    "\225\043\120\045\057\046\077\051\073\054\072\055\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\230\004\047\010\034\011\045\016\035\017\025\027\044" +
    "\030\036\031\030\032\023\033\040\034\032\035\037\047" +
    "\033\050\026\001\001\000\002\001\001\000\004\053\233" +
    "\001\001\000\006\010\017\052\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\240\004\047\010\034" +
    "\011\045\016\035\017\025\027\044\030\036\031\030\032" +
    "\023\033\040\034\032\035\037\047\033\050\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String message, Object info){
  StringBuilder m = new StringBuilder("Error");
  if(info instanceof java_cup.runtime.Symbol){
       java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
       if(s.left >= 0){
        m.append(" en la linea " + (s.left+1));
         if(s.right >=0)
           m.append(", columna " + (s.right+1));
      }
      m.append(" @ symbol: " + s);
    }
     m.append(" : " + message);
     Interfaz.console.setText(Interfaz.console.getText() + m.toString() + "\n");
}

public void report_fatal_error(String message, Object info){
   report_error(message, info);
   //System.exit(1);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Body2 Main END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAINBEGIN Body ENDMAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Body ::= Instruccion PUNTOCOMA Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Body ::= Bloque Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Body ::= Asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruccion ::= DeclaracionVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruccion ::= Llamado 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionVariable ::= Type IDENTIFICADOR Var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariable",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var ::= DeclaracionSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var ::= DeclaracionMultiple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DeclaracionSimple ::= DeclS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionSimple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DeclaracionMultiple ::= COMA IDENTIFICADOR DeclaracionMultiple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionMultiple",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclaracionMultiple ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionMultiple",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Valor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Valor ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AsigValor ::= Cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AsigValor ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AsigValor ::= Booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Booleana ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Booleana ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Cadena ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Cadena ::= ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclS ::= ASIGNACION AsigValor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Asignacion ::= IDENTIFICADOR DeclS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Llamado ::= Print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Llamado ::= LlamadoMetodos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LlamadoMetodos ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parametros ::= Type IDENTIFICADOR Multiple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parametros ::= Type IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Multiple ::= COMA Parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Multiple",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Print ::= PRINT PARIZQ AsigValor PARDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Body2 ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER DO Body END Body2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Bloque ::= Loops END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Bloque ::= Conditional END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Loops ::= ForLoop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Loops ::= WhileLoop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Conditional ::= IfConditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Conditional ::= SwitchConditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForLoop ::= FOR PARIZQ ExprFor PARDER DO Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExprFor ::= DeclaracionVariable PUNTOCOMA Expresion PUNTOCOMA ExpresionIncDec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprFor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WhileLoop ::= WHILE PARIZQ ExpresionBooleana PARDER DO Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IfConditional ::= IF PARIZQ ExpresionBooleana PARDER DO Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SwitchConditional ::= SWITCH PARIZQ IDENTIFICADOR PARDER DO ExpresionSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionSwitch ::= CASE Switch DOSPUNTOS Body BREAK PUNTOCOMA ExpresionSwitch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionSwitch",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpresionSwitch ::= OTHER DOSPUNTOS Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionSwitch",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Switch ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Switch ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= ExpresionBooleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpresionAritmetica ::= ExpresionAritmetica SUMA Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpresionAritmetica ::= ExpresionAritmetica MENOS Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionAritmetica ::= Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Factor ::= Factor MULT Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Factor ::= Factor DIV Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Factor ::= Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Term ::= PARIZQ ExpresionAritmetica Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= Valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpresionBooleana ::= ExpresionComparacion UnionExpresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpresionBooleana ::= ExpresionComparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpresionBooleana ::= Booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UnionExpresion ::= OperadorComparacion ExpresionComparacion UnionExpresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UnionExpresion ::= OperadorComparacion ExpresionComparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpresionComparacion ::= AsigValor OperadorRelacional AsigValor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpresionComparacion ::= NOT ExpresionComparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorRelacional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorRelacional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadorRelacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadorComparacion ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorComparacion ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpresionIncDec ::= IDENTIFICADOR Incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpresionIncDec ::= IDENTIFICADOR Decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Incremento ::= SUMA SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Decremento ::= MENOS MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

