
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Wed Mar 25 13:24:55 CST 2015
//----------------------------------------------------

package hashtag;

import java_cup.runtime.*;
import java.util.*;
import java.io.FileReader;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Wed Mar 25 13:24:55 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\010\006\000\002\010" +
    "\005\000\002\010\004\000\002\070\002\000\002\010\007" +
    "\000\002\065\003\000\002\002\004\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\071\002\000\002" +
    "\013\006\000\002\003\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\072\002" +
    "\000\002\004\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\073\002\000\002" +
    "\014\005\000\002\066\005\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\061\004" +
    "\000\002\063\005\000\002\063\003\000\002\064\003\000" +
    "\002\062\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\051\003\000\002\051\003\000\002\056\003" +
    "\000\002\056\003\000\002\006\005\000\002\006\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\015\003\000\002\015" +
    "\003\000\002\050\006\000\002\050\005\000\002\045\005" +
    "\000\002\045\003\000\002\052\005\000\002\052\004\000" +
    "\002\052\002\000\002\074\002\000\002\052\005\000\002" +
    "\053\004\000\002\047\006\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\002\000\002\011\004" +
    "\000\002\011\003\000\002\012\011\000\002\012\011\000" +
    "\002\075\002\000\002\012\007\000\002\055\010\000\002" +
    "\055\007\000\002\057\003\000\002\057\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\007\000" +
    "\002\076\002\000\002\027\006\000\002\033\010\000\002" +
    "\030\007\000\002\077\002\000\002\030\010\000\002\100" +
    "\002\000\002\030\006\000\002\060\003\000\002\060\003" +
    "\000\002\031\005\000\002\031\007\000\002\101\002\000" +
    "\002\031\006\000\002\044\005\000\002\044\005\000\002" +
    "\032\011\000\002\032\011\000\002\102\002\000\002\032" +
    "\006\000\002\036\004\000\002\036\003\000\002\037\010" +
    "\000\002\037\007\000\002\103\002\000\002\037\006\000" +
    "\002\035\003\000\002\035\003\000\002\041\005\000\002" +
    "\041\005\000\002\041\003\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\005" +
    "\000\002\043\003\000\002\040\004\000\002\040\003\000" +
    "\002\040\003\000\002\034\005\000\002\034\004\000\002" +
    "\016\005\000\002\016\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\017\003\000\002\017\003\000" +
    "\002\021\004\000\002\021\004\000\002\022\004\000\002" +
    "\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\006\025\005\035\006\001\002\000\004\002" +
    "\u0102\001\002\000\004\041\022\001\002\000\012\003\012" +
    "\025\005\036\017\042\016\001\002\000\004\003\010\001" +
    "\002\000\004\002\ufffe\001\002\000\004\025\ufffb\001\002" +
    "\000\004\041\uffb7\001\002\000\010\003\012\025\uffba\042" +
    "\016\001\002\000\004\025\005\001\002\000\004\036\371" +
    "\001\002\000\016\046\027\047\064\050\030\051\051\052" +
    "\047\060\331\001\002\000\004\003\020\001\002\000\004" +
    "\041\ufffd\001\002\000\004\041\022\001\002\000\036\003" +
    "\055\031\063\032\043\034\031\036\036\037\037\041\022" +
    "\045\054\046\027\047\064\050\030\051\051\052\047\065" +
    "\056\001\002\000\004\002\ufffc\001\002\000\036\003\uffaf" +
    "\031\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\065\uffaf" +
    "\001\002\000\036\003\215\031\063\032\043\034\031\036" +
    "\ufff3\037\037\044\ufff3\045\054\046\027\047\064\050\030" +
    "\051\051\052\047\065\056\001\002\000\004\024\uffec\001" +
    "\002\000\004\065\uffd1\001\002\000\004\065\uffcf\001\002" +
    "\000\006\003\312\021\313\001\002\000\006\017\310\024" +
    "\uffed\001\002\000\004\024\uffcb\001\002\000\004\024\uffeb" +
    "\001\002\000\004\036\307\001\002\000\056\002\ufff7\003" +
    "\ufff7\020\ufff7\025\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\057\ufff7" +
    "\065\ufff7\001\002\000\006\003\247\021\250\001\002\000" +
    "\004\024\uffd2\001\002\000\036\003\uffb0\031\uffb0\032\uffb0" +
    "\034\uffb0\036\uffb0\037\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\065\uffb0\001\002\000\036" +
    "\003\uffad\031\uffad\032\uffad\034\uffad\036\uffad\037\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\065\uffad\001\002\000\006\003\233\021\234\001\002\000" +
    "\004\024\uffcc\001\002\000\004\065\230\001\002\000\004" +
    "\024\225\001\002\000\004\065\uffce\001\002\000\036\003" +
    "\uffb1\031\uffb1\032\uffb1\034\uffb1\036\uffb1\037\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\065" +
    "\uffb1\001\002\000\004\065\uffcd\001\002\000\036\003\uffac" +
    "\031\uffac\032\uffac\034\uffac\036\uffac\037\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\065\uffac" +
    "\001\002\000\036\003\uffae\031\uffae\032\uffae\034\uffae\036" +
    "\uffae\037\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\065\uffae\001\002\000\004\021\217\001" +
    "\002\000\036\003\uffef\024\uffe9\031\uffef\032\uffef\034\uffef" +
    "\036\ufff6\037\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\065\uffef\001\002\000\012\004\123\005\124" +
    "\017\173\021\174\001\002\000\036\003\ufff1\031\ufff1\032" +
    "\ufff1\034\ufff1\036\ufff1\037\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\065\ufff1\001\002\000" +
    "\004\024\uffea\001\002\000\004\024\172\001\002\000\004" +
    "\036\171\001\002\000\006\003\065\021\066\001\002\000" +
    "\004\065\uffd0\001\002\000\004\041\uffaa\001\002\000\004" +
    "\046\070\001\002\000\004\020\165\001\002\000\004\065" +
    "\071\001\002\000\010\004\123\005\124\017\163\001\002" +
    "\000\004\024\073\001\002\000\024\014\077\021\100\061" +
    "\111\062\114\063\104\064\076\065\112\066\110\067\101" +
    "\001\002\000\042\004\uff8c\005\uff8c\006\134\007\133\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\020\uff8c" +
    "\022\132\023\uff8c\024\uff8c\027\uff8c\030\uff8c\001\002\000" +
    "\016\010\161\011\160\012\153\013\154\015\157\016\156" +
    "\001\002\000\030\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015" +
    "\uffd5\016\uffd5\020\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5" +
    "\001\002\000\024\014\077\021\100\061\111\062\114\063" +
    "\104\064\076\065\112\066\110\067\101\001\002\000\012" +
    "\021\100\061\111\062\114\065\112\001\002\000\030\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\027\uffd7\030\uffd7\001\002\000\012\020" +
    "\uff84\024\uff84\027\142\030\144\001\002\000\034\004\127" +
    "\005\130\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\020\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4\001\002" +
    "\000\030\010\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016" +
    "\uffd9\020\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\001\002" +
    "\000\030\010\uffda\011\uffda\012\uffda\013\uffda\015\uffda\016" +
    "\uffda\020\uffda\023\uffda\024\uffda\027\uffda\030\uffda\001\002" +
    "\000\042\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\015\uff86\016\uff86\020\uff86\022\uff86" +
    "\023\uff86\024\uff86\027\uff86\030\uff86\001\002\000\022\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\020\uff83" +
    "\024\uff83\001\002\000\030\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\015\uffd6\016\uffd6\020\uffd6\023\uffd6\024\uffd6\027\uffd6" +
    "\030\uffd6\001\002\000\042\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd" +
    "\020\uffdd\022\uffdd\023\uffdd\024\uffdd\027\uffdd\030\uffdd\001" +
    "\002\000\042\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc\001\002\000\042" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\015\uff88\016\uff88\020\uff88\022\uff88\023\uff88" +
    "\024\uff88\027\uff88\030\uff88\001\002\000\042\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\027" +
    "\uffdb\030\uffdb\001\002\000\004\024\116\001\002\000\004" +
    "\065\117\001\002\000\006\004\123\005\124\001\002\000" +
    "\004\020\uffa8\001\002\000\006\020\uff76\024\uff76\001\002" +
    "\000\006\020\uff75\024\uff75\001\002\000\004\004\126\001" +
    "\002\000\004\005\125\001\002\000\006\020\uff73\024\uff73" +
    "\001\002\000\006\020\uff74\024\uff74\001\002\000\012\021" +
    "\100\061\111\062\114\065\112\001\002\000\012\021\100" +
    "\061\111\062\114\065\112\001\002\000\042\004\uff8d\005" +
    "\uff8d\006\134\007\133\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\015\uff8d\016\uff8d\020\uff8d\022\132\023\uff8d\024\uff8d\027" +
    "\uff8d\030\uff8d\001\002\000\012\021\100\061\111\062\114" +
    "\065\112\001\002\000\012\021\100\061\111\062\114\065" +
    "\112\001\002\000\012\021\100\061\111\062\114\065\112" +
    "\001\002\000\042\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\015\uff8a\016\uff8a\020\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\027\uff8a\030\uff8a\001\002\000" +
    "\042\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\015\uff8b\016\uff8b\020\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\027\uff8b\030\uff8b\001\002\000\042\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\015\uff89\016\uff89\020\uff89\022\uff89\023\uff89\024\uff89" +
    "\027\uff89\030\uff89\001\002\000\042\004\uff8e\005\uff8e\006" +
    "\134\007\133\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e" +
    "\016\uff8e\020\uff8e\022\132\023\uff8e\024\uff8e\027\uff8e\030" +
    "\uff8e\001\002\000\024\014\077\021\100\061\111\062\114" +
    "\063\104\064\076\065\112\066\110\067\101\001\002\000" +
    "\024\014\uff78\021\uff78\061\uff78\062\uff78\063\uff78\064\uff78" +
    "\065\uff78\066\uff78\067\uff78\001\002\000\006\020\uff85\024" +
    "\uff85\001\002\000\024\014\uff77\021\uff77\061\uff77\062\uff77" +
    "\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\001\002\000" +
    "\030\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8" +
    "\020\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8\001\002\000" +
    "\012\020\uff81\024\uff81\027\142\030\144\001\002\000\006" +
    "\020\uff82\024\uff82\001\002\000\010\004\127\005\130\020" +
    "\151\001\002\000\042\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87\016\uff87\020" +
    "\uff87\022\uff87\023\uff87\024\uff87\027\uff87\030\uff87\001\002" +
    "\000\012\020\uff7f\024\uff7f\027\uff7f\030\uff7f\001\002\000" +
    "\022\021\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c" +
    "\066\uff7c\067\uff7c\001\002\000\022\021\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\001\002" +
    "\000\022\021\100\061\111\062\114\063\104\064\076\065" +
    "\112\066\110\067\101\001\002\000\022\021\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\001" +
    "\002\000\022\021\uff79\061\uff79\062\uff79\063\uff79\064\uff79" +
    "\065\uff79\066\uff79\067\uff79\001\002\000\022\021\uff7d\061" +
    "\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d" +
    "\001\002\000\022\021\uff7e\061\uff7e\062\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\067\uff7e\001\002\000\012\020\uff80" +
    "\024\uff80\027\uff80\030\uff80\001\002\000\022\021\100\061" +
    "\111\062\114\063\104\064\076\065\112\066\110\067\101" +
    "\001\002\000\004\024\uffd3\001\002\000\004\041\022\001" +
    "\002\000\036\003\uffab\031\uffab\032\uffab\034\uffab\036\uffab" +
    "\037\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\065\uffab\001\002\000\004\041\022\001\002" +
    "\000\036\003\uffa9\031\uffa9\032\uffa9\034\uffa9\036\uffa9\037" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\065\uffa9\001\002\000\056\002\ufff8\003\ufff8\020" +
    "\ufff8\025\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\057\ufff8\065\ufff8" +
    "\001\002\000\036\003\ufff0\031\ufff0\032\ufff0\034\ufff0\036" +
    "\ufff0\037\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\065\ufff0\001\002\000\032\021\100\053" +
    "\206\054\204\055\207\056\205\061\111\062\114\063\104" +
    "\064\076\065\112\066\110\067\101\001\002\000\024\020" +
    "\176\021\100\061\111\062\114\063\104\064\076\065\112" +
    "\066\110\067\101\001\002\000\006\020\uffc7\023\201\001" +
    "\002\000\006\020\uffc9\024\uffc9\001\002\000\004\020\200" +
    "\001\002\000\006\020\uffca\024\uffca\001\002\000\022\021" +
    "\100\061\111\062\114\063\104\064\076\065\112\066\110" +
    "\067\101\001\002\000\004\020\uffc8\001\002\000\004\024" +
    "\uffe7\001\002\000\004\024\uffe3\001\002\000\004\024\uffe5" +
    "\001\002\000\004\024\uffe4\001\002\000\004\024\uffe6\001" +
    "\002\000\004\024\216\001\002\000\032\003\215\031\063" +
    "\032\043\034\031\037\037\045\054\046\027\047\064\050" +
    "\030\051\051\052\047\065\056\001\002\000\004\036\213" +
    "\001\002\000\056\002\ufff5\003\ufff5\020\ufff5\025\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\057\ufff5\065\ufff5\001\002\000\036" +
    "\003\uffee\031\uffee\032\uffee\034\uffee\036\uffee\037\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\065\uffee\001\002\000\034\003\uffef\024\uffe9\031\uffef\032" +
    "\uffef\034\uffef\037\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\065\uffef\001\002\000\004\024\uffe8\001" +
    "\002\000\010\020\uffbc\064\223\065\220\001\002\000\006" +
    "\020\uffbf\021\174\001\002\000\004\020\uffbd\001\002\000" +
    "\004\020\224\001\002\000\004\020\uffbe\001\002\000\004" +
    "\024\uffc0\001\002\000\036\003\ufff2\031\ufff2\032\ufff2\034" +
    "\ufff2\036\ufff2\037\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\065\ufff2\001\002\000\010\017" +
    "\uffe0\023\231\024\uffe0\001\002\000\006\017\uffe2\024\uffe2" +
    "\001\002\000\010\017\uffdf\023\uffdf\024\uffdf\001\002\000" +
    "\004\065\230\001\002\000\006\017\uffe1\024\uffe1\001\002" +
    "\000\004\041\uff9e\001\002\000\024\014\077\021\100\061" +
    "\111\062\114\063\104\064\076\065\241\066\110\067\101" +
    "\001\002\000\004\041\022\001\002\000\040\003\uffa0\031" +
    "\uffa0\032\uffa0\033\237\034\uffa0\036\uffa0\037\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\065" +
    "\uffa0\001\002\000\004\041\022\001\002\000\036\003\uff9f" +
    "\031\uff9f\032\uff9f\034\uff9f\036\uff9f\037\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\065\uff9f" +
    "\001\002\000\032\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\020\244" +
    "\022\uffdc\001\002\000\004\020\243\001\002\000\004\041" +
    "\uff9c\001\002\000\004\041\uff9b\001\002\000\004\041\022" +
    "\001\002\000\036\003\uff9d\031\uff9d\032\uff9d\034\uff9d\036" +
    "\uff9d\037\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\065\uff9d\001\002\000\006\040\uff98\057" +
    "\uff98\001\002\000\010\061\251\063\254\065\253\001\002" +
    "\000\006\020\uff90\026\uff90\001\002\000\004\020\301\001" +
    "\002\000\004\020\255\001\002\000\006\020\uff8f\026\uff8f" +
    "\001\002\000\004\041\256\001\002\000\006\040\262\057" +
    "\257\001\002\000\004\026\275\001\002\000\004\036\274" +
    "\001\002\000\042\003\uff95\031\uff95\032\uff95\034\uff95\036" +
    "\uff95\037\uff95\040\262\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\057\257\065\uff95\001\002\000" +
    "\010\003\264\061\251\063\254\001\002\000\004\026\267" +
    "\001\002\000\004\041\uff92\001\002\000\004\041\022\001" +
    "\002\000\042\003\uff91\031\uff91\032\uff91\034\uff91\036\uff91" +
    "\037\uff91\040\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\057\uff91\065\uff91\001\002\000\004" +
    "\041\022\001\002\000\004\043\271\001\002\000\004\024" +
    "\272\001\002\000\042\003\uff94\031\uff94\032\uff94\034\uff94" +
    "\036\uff94\037\uff94\040\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\057\uff94\065\uff94\001\002" +
    "\000\036\003\uff96\031\uff96\032\uff96\034\uff96\036\uff96\037" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\065\uff96\001\002\000\036\003\uff9a\031\uff9a\032" +
    "\uff9a\034\uff9a\036\uff9a\037\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\065\uff9a\001\002\000" +
    "\004\041\022\001\002\000\004\043\277\001\002\000\004" +
    "\024\300\001\002\000\042\003\uff93\031\uff93\032\uff93\034" +
    "\uff93\036\uff93\037\uff93\040\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\057\uff93\065\uff93\001" +
    "\002\000\004\041\302\001\002\000\006\040\262\057\257" +
    "\001\002\000\004\036\304\001\002\000\036\003\uff99\031" +
    "\uff99\032\uff99\034\uff99\036\uff99\037\uff99\044\uff99\045\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\065\uff99\001" +
    "\002\000\006\040\262\057\257\001\002\000\036\003\uff97" +
    "\031\uff97\032\uff97\034\uff97\036\uff97\037\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\065\uff97" +
    "\001\002\000\056\002\ufff9\003\ufff9\020\ufff9\025\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\057\ufff9\065\ufff9\001\002\000\022" +
    "\021\100\061\111\062\114\063\104\064\076\065\112\066" +
    "\110\067\101\001\002\000\004\024\uffde\001\002\000\032" +
    "\003\uffa4\031\uffa4\032\uffa4\034\uffa4\037\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\065\uffa4\001\002" +
    "\000\026\003\316\014\077\021\100\061\111\062\114\063" +
    "\104\064\076\065\112\066\110\067\101\001\002\000\004" +
    "\020\323\001\002\000\020\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\015\uffda\016\uffda\020\uffa1\001\002\000\004\020\uffa6" +
    "\001\002\000\004\020\uffa2\001\002\000\004\020\321\001" +
    "\002\000\032\003\215\031\063\032\043\034\031\037\037" +
    "\045\054\046\027\047\064\050\030\051\051\052\047\065" +
    "\056\001\002\000\036\003\uffa5\031\uffa5\032\uffa5\034\uffa5" +
    "\036\uffa5\037\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\065\uffa5\001\002\000\004\041\022" +
    "\001\002\000\036\003\uffa7\031\uffa7\032\uffa7\034\uffa7\036" +
    "\uffa7\037\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\065\uffa7\001\002\000\032\003\215\031" +
    "\063\032\043\034\031\037\037\045\054\046\027\047\064" +
    "\050\030\051\051\052\047\065\056\001\002\000\036\003" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\036\uffa3\037\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\065" +
    "\uffa3\001\002\000\006\036\ufff4\044\ufff4\001\002\000\004" +
    "\065\347\001\002\000\004\065\332\001\002\000\004\021" +
    "\333\001\002\000\020\003\335\020\uffc4\046\027\047\064" +
    "\050\030\051\051\052\047\001\002\000\004\065\343\001" +
    "\002\000\004\041\uffc3\001\002\000\004\020\337\001\002" +
    "\000\004\041\022\001\002\000\010\003\uffb9\025\uffb9\042" +
    "\uffb9\001\002\000\004\041\022\001\002\000\004\020\uffc2" +
    "\001\002\000\006\020\uffc5\023\344\001\002\000\020\003" +
    "\335\020\uffc4\046\027\047\064\050\030\051\051\052\047" +
    "\001\002\000\004\020\uffc6\001\002\000\004\020\uffc1\001" +
    "\002\000\004\021\350\001\002\000\020\003\335\020\uffc4" +
    "\046\027\047\064\050\030\051\051\052\047\001\002\000" +
    "\004\020\352\001\002\000\004\041\353\001\002\000\034" +
    "\003\215\031\063\032\043\034\031\037\037\044\356\045" +
    "\054\046\027\047\064\050\030\051\051\052\047\065\056" +
    "\001\002\000\010\003\uffb8\025\uffb8\042\uffb8\001\002\000" +
    "\004\044\365\001\002\000\022\021\100\061\111\062\114" +
    "\063\104\064\076\065\362\066\110\067\101\001\002\000" +
    "\004\024\uffb3\001\002\000\004\024\uffb2\001\002\000\004" +
    "\024\363\001\002\000\020\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\021\174\022\uffdc\024\uffdc\001\002\000\004\036\364" +
    "\001\002\000\010\003\uffb4\025\uffb4\042\uffb4\001\002\000" +
    "\022\021\100\061\111\062\114\063\104\064\076\065\362" +
    "\066\110\067\101\001\002\000\004\024\367\001\002\000" +
    "\004\036\370\001\002\000\010\003\uffb5\025\uffb5\042\uffb5" +
    "\001\002\000\004\002\uffff\001\002\000\004\036\373\001" +
    "\002\000\004\002\000\001\002\000\004\025\uffbb\001\002" +
    "\000\004\041\022\001\002\000\006\003\012\042\016\001" +
    "\002\000\004\025\005\001\002\000\010\003\uffb6\025\uffb6" +
    "\042\uffb6\001\002\000\012\003\ufffa\025\ufffa\036\ufffa\042" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\006\002\006\010\003\001\001\000\002\001" +
    "\001\000\004\013\u0100\001\001\000\012\002\014\011\010" +
    "\012\012\065\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\374\001\001\000\006" +
    "\011\373\012\012\001\001\000\004\002\371\001\001\000" +
    "\002\001\001\000\004\005\327\001\001\000\002\001\001" +
    "\000\004\070\020\001\001\000\004\013\022\001\001\000" +
    "\052\003\034\004\024\005\044\006\060\013\061\014\045" +
    "\015\033\021\037\024\056\025\047\026\040\027\023\030" +
    "\052\031\041\032\051\047\043\050\032\061\031\062\025" +
    "\066\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\326\004\024\005\044\006\060\014\045\015\033" +
    "\021\037\024\056\025\047\026\040\027\023\030\052\031" +
    "\041\032\051\047\043\050\032\061\031\062\025\066\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\234\001\001\000\002\001\001\000" +
    "\006\063\226\064\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\071\211" +
    "\072\210\073\207\001\001\000\006\022\120\023\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\166\001\001\000\004\033\066\001\001\000\002" +
    "\001\001\000\006\006\071\021\037\001\001\000\006\022" +
    "\120\023\121\001\001\000\002\001\001\000\024\007\074" +
    "\016\101\040\114\041\102\042\073\043\112\051\106\054" +
    "\105\056\104\001\001\000\002\001\001\000\004\020\154" +
    "\001\001\000\002\001\001\000\022\007\074\016\151\041" +
    "\102\042\073\043\112\051\144\054\105\056\104\001\001" +
    "\000\012\041\147\042\073\043\112\054\105\001\001\000" +
    "\002\001\001\000\006\017\140\034\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\117\001\001\000\006\022\120" +
    "\023\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\137\043\112\054" +
    "\105\001\001\000\010\042\130\043\112\054\105\001\001" +
    "\000\002\001\001\000\006\043\136\054\105\001\001\000" +
    "\006\043\135\054\105\001\001\000\006\043\134\054\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\074\016\145\041\102" +
    "\042\073\043\112\051\144\054\105\056\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\140\034\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\161\041" +
    "\102\042\073\043\112\051\144\054\105\056\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\163\041\102" +
    "\042\073\043\112\051\144\054\105\056\104\001\001\000" +
    "\002\001\001\000\004\013\165\001\001\000\002\001\001" +
    "\000\004\013\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\163\041\102\042\073" +
    "\043\112\051\144\054\105\056\104\067\202\001\001\000" +
    "\022\007\174\041\102\042\073\043\112\045\176\051\144" +
    "\054\105\056\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\174" +
    "\041\102\042\073\043\112\045\201\051\144\054\105\056" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\213\005\044\006\060" +
    "\014\045\015\033\021\037\024\056\025\047\026\040\027" +
    "\023\030\052\031\041\032\051\047\043\050\032\061\031" +
    "\062\025\066\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\210\073\207\001\001" +
    "\000\002\001\001\000\006\046\221\050\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\063\231" +
    "\064\225\001\001\000\002\001\001\000\004\101\244\001" +
    "\001\000\024\007\074\016\101\040\241\041\102\042\073" +
    "\043\112\051\106\054\105\056\104\001\001\000\004\013" +
    "\235\001\001\000\002\001\001\000\004\013\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\245\001\001" +
    "\000\002\001\001\000\004\102\304\001\001\000\004\035" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\257\037\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\272\037\260\001\001\000\004\035\262\001" +
    "\001\000\002\001\001\000\004\103\264\001\001\000\004" +
    "\013\265\001\001\000\002\001\001\000\004\013\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\302\037\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\305\037\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\310\041\102\042\073\043\112\051\144\054\105\056\104" +
    "\001\001\000\002\001\001\000\004\100\324\001\001\000" +
    "\026\007\074\016\101\040\316\041\102\042\073\043\112" +
    "\051\106\054\105\056\314\060\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\321\005\044\006" +
    "\060\014\045\015\033\021\037\024\056\025\047\026\040" +
    "\027\023\030\052\031\041\032\051\047\043\050\032\061" +
    "\031\062\025\066\057\001\001\000\002\001\001\000\004" +
    "\013\323\001\001\000\002\001\001\000\046\004\325\005" +
    "\044\006\060\014\045\015\033\021\037\024\056\025\047" +
    "\026\040\027\023\030\052\031\041\032\051\047\043\050" +
    "\032\061\031\062\025\066\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\333\052\335\001\001\000\002" +
    "\001\001\000\004\074\340\001\001\000\002\001\001\000" +
    "\004\013\337\001\001\000\002\001\001\000\004\013\341" +
    "\001\001\000\002\001\001\000\004\053\344\001\001\000" +
    "\006\005\333\052\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\333\052\350\001" +
    "\001\000\002\001\001\000\004\055\353\001\001\000\050" +
    "\003\354\004\024\005\044\006\060\014\045\015\033\021" +
    "\037\024\056\025\047\026\040\027\023\030\052\031\041" +
    "\032\051\047\043\050\032\061\031\062\025\066\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\357" +
    "\041\102\042\073\043\112\050\356\051\144\054\105\056" +
    "\104\057\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\357\041\102\042\073\043\112" +
    "\050\356\051\144\054\105\056\104\057\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\375\001\001\000\006\011\376\012\012" +
    "\001\001\000\004\002\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Node> AST = new ArrayList();
    public int errors = 0;
    public int fatal = 0;
    public void report_error(String message, Object info){
        StringBuilder m = new StringBuilder("");
        if(info instanceof java_cup.runtime.Symbol){
            m.append("Error: ");
            m.append(info);
            m.append(" : " + message);
        } else {
            if (info instanceof String) {
                errors++;
                m.append("    "+ errors + "==> " + info + " "+ message+"\n");
            }
        }

        GUI.console.setText(GUI.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
        fatal++;
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Functions Main END 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                        RESULT = new Node("PROG", f, mn);
                                        parser.AST.add(RESULT);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= BEGIN Main END 
            {
              Node RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                        RESULT = new Node("PROG", mn);
                                        parser.AST.add(RESULT);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Main error 
            {
              Node RESULT =null;
		 parser.report_error("syntax, missing token 'begin'.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Node RESULT =null;
 parser.report_error("syntax, missing token 'main' function.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= BEGIN END error NT$0 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Functions ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FUNCTIONS",fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Main ::= MAINBEGIN Stmts 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("MAIN",st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmts ::= DO BodyList END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmts ::= DO Stmts END 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Stmts ::= DO END 
            {
              Node RESULT =null;
		 RESULT = new Node("λ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Node RESULT =null;
 parser.report_error("block declaration. Possible unmatched 'do ... end'","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmts ::= DO error NT$1 END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BodyList ::= BodyPart BodyList 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bdl.add(bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BodyList ::= BodyPart 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body", bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BodyPart ::= Instruccion PUNTOCOMA 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BodyPart ::= Bloque 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BodyPart ::= Asignacion PUNTOCOMA 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Node RESULT =null;
 parser.report_error("start of expression.","ILLEGAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BodyPart ::= error NT$2 BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruccion ::= VarDeclare 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruccion ::= VarInit 
            {
              Node RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruccion ::= Llamado 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= Lectura 
            {
              Node RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Node RESULT =null;
 parser.report_error("variable initialization, declaration or function call","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= error NT$3 PUNTOCOMA 
            {
              Node RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lectura ::= IDENTIFICADOR ASIGNACION Lec 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lec ::= READINT 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lec ::= READDOUBLE 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lec ::= READSTRING 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lec ::= READCHAR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDeclare ::= Type VarDeclarationList 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        Node node = new Node(vdl.label);
                                        RESULT = new Node("declare",vdl.getChildren()).add(node);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclare",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarDeclarationList ::= VarDeclarationPart COMA VarDeclarationList 
            {
              Node RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vdp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdl.add(vdp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VarDeclarationList ::= VarDeclarationPart 
            {
              Node RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarDeclarationPart ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationPart",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarInit ::= VarDeclare ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",vd,av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Valor ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(num)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Valor ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Valor ::= REAL 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Double.toString(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AsigValor ::= Cadena 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AsigValor ::= CARACTER 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("'"+Character.toString(ch)+"'"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AsigValor ::= Booleana 
            {
              Node RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bool = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Booleana ::= TRUE 
            {
              Node RESULT =null;
		 RESULT = new Node("true"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Booleana ::= FALSE 
            {
              Node RESULT =null;
		 RESULT = new Node("false"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Cadena ::= CADENA 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("\""+cad+"\""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Cadena ::= ExpresionAritmetica 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Asignacion ::= IDENTIFICADOR ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",new Node(id), av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Asignacion ::= ExpresionIncDec 
            {
              Node RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = update; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Type ::= INT 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= DOUBLE 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= CHAR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= BOOLEAN 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= STRING 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Llamado ::= Print 
            {
              Node RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Llamado ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LlamadoMetodos ::= IDENTIFICADOR PARIZQ Contenido PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("function_call",new Node(id),cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LlamadoMetodos ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("function_call", new Node(id), new Node("params",new Node("λ"))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Contenido ::= AsigValor COMA Contenido 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cont.add(av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Contenido ::= AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params",av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Parametros ::= Type IDENTIFICADOR Multiple 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params", new Node(id), mult); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Parametros ::= Type IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params", new Node(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Parametros ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("params", new Node("λ")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$4 ::= 
            {
              Node RESULT =null;
 parser.report_error("function arguments.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Parametros ::= error NT$4 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Multiple ::= COMA Parametros 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Multiple",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Print ::= PRINT PARIZQ PrintParam PARDER 
            {
              Node RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PRINT", pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrintParam ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PrintParam ::= CADENA 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("\""+cad+"\""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PrintParam ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrintParam ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("λ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FunctionList ::= FunctionPart FunctionList 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.add(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FunctionList ::= FunctionPart 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FunctionPart ::= FUNCTION VOID IDENTIFICADOR PARIZQ Parametros PARDER Stmts 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id, param, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FunctionPart ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER EndFunction 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ef = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id,param,ef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$5 ::= 
            {
              Node RESULT =null;
 parser.report_error("function declaration.Example <Function int Suma()...>","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FunctionPart ::= error NT$5 Stmts FunctionList Main 
            {
              Node RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EndFunction ::= DO BodyList RETURN Return PUNTOCOMA END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node rt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("branch", bdl, rt);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndFunction",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EndFunction ::= DO RETURN Return PUNTOCOMA END 
            {
              Node RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node rt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = rt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndFunction",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Return ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN",lm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Return ::= AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN", av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Bloque ::= Loops 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Bloque ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Loops ::= ForLoop 
            {
              Node RESULT =null;
		int flpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node flp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = flp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Loops ::= WhileLoop 
            {
              Node RESULT =null;
		int wlpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wlp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wlp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Conditional ::= IfConditional 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Conditional ::= SwitchConditional 
            {
              Node RESULT =null;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node swc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = swc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ForLoop ::= FOR PARIZQ ExprFor PARDER Stmts 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FOR", expr, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Node RESULT =null;
 parser.report_error("FOR statement declaration","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForLoop ::= FOR error NT$6 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprFor ::= INT Asignacion PUNTOCOMA ExpresionBooleana PUNTOCOMA ExpresionIncDec 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exprb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("structure",asig,exprb,update); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprFor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WhileLoop ::= WHILE PARIZQ Condicion PARDER Stmts 
            {
              Node RESULT =null;
		int condwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node condw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("WHILE", condw, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$7 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration, missing boolean expression.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WhileLoop ::= WHILE PARIZQ error NT$7 PARDER BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$8 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration.  Example <while(a>10)...> ","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WhileLoop ::= WHILE error NT$8 BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condicion ::= ExpresionBooleana 
            {
              Node RESULT =null;
		int exprbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Condicion ::= Cadena 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cad = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicion",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IfConditional ::= IF ConditionGroup Stmts 
            {
              Node RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cg = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cg, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IfConditional ::= IF ConditionGroup Stmts ELSE Stmts 
            {
              Node RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node cg = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cg,st1,new Node("ELSE",st2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$9 ::= 
            {
              Node RESULT =null;
 parser.report_error("IF statement declaration. Example <if(a>10)...> ", "WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IfConditional ::= IF error NT$9 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ConditionGroup ::= PARIZQ ExpresionBooleana PARDER 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionGroup",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ConditionGroup ::= PARIZQ IDENTIFICADOR PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionGroup",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SwitchConditional ::= SWITCH PARIZQ IDENTIFICADOR PARDER DO ExprSwitchList END 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", new Node(id), exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SwitchConditional ::= SWITCH PARIZQ Switch PARDER DO ExprSwitchList END 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", sw, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$10 ::= 
            {
              Node RESULT =null;
parser.report_error("SWITCH statement declaration.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SwitchConditional ::= SWITCH error NT$10 ExprSwitchList 
            {
              Node RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExprSwitchList ::= ExprSwitchPart ExprSwitchList 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprl.add(exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprSwitchList ::= ExprSwitchPart 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExprSwitchPart ::= CASE Switch DOSPUNTOS Stmts BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("CASE", sw, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExprSwitchPart ::= OTHER DOSPUNTOS Stmts BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("OTHER", st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$11 ::= 
            {
              Node RESULT =null;
parser.report_error("CASE syntax in SWITCH statement.","WRONG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExprSwitchPart ::= CASE error NT$11 Stmts 
            {
              Node RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Switch ::= NUMERO 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Switch ::= CARACTER 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Character.toString(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpresionAritmetica ::= ExpresionAritmetica SUMA Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("+",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpresionAritmetica ::= ExpresionAritmetica MENOS Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("-",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExpresionAritmetica ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= Factor MULT Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("*",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Factor ::= Factor DIV Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("/",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Factor ::= Factor MOD Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("%",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Term ::= PARIZQ ExpresionAritmetica PARDER 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Term ::= Valor 
            {
              Node RESULT =null;
		int vlrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vlr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vlr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExpresionBooleana ::= ExpresionComparacion UnionExpresion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node uexpr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("conditions",exprc,uexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExpresionBooleana ::= ExpresionComparacion 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExpresionBooleana ::= Booleana 
            {
              Node RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bool = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // UnionExpresion ::= OperadorComparacion ExpresionComparacion UnionExpresion 
            {
              Node RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node opcomp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node uexpr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = uexpr.add(opcomp,exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // UnionExpresion ::= OperadorComparacion ExpresionComparacion 
            {
              Node RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node opcomp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  opcomp.add(ec);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExpresionComparacion ::= AsigValor OperadorRelacional AsigValor 
            {
              Node RESULT =null;
		int av1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int av1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node av1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int av2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int av2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(oprel.label, av1, av2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ExpresionComparacion ::= NOT ExpresionComparacion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("negation", exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadorRelacional ::= MAYOR 
            {
              Node RESULT =null;
		 RESULT = new Node(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadorRelacional ::= MENOR 
            {
              Node RESULT =null;
		 RESULT = new Node("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OperadorRelacional ::= MAYORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OperadorRelacional ::= MENORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OperadorRelacional ::= IGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OperadorRelacional ::= DIFERENTE 
            {
              Node RESULT =null;
		 RESULT = new Node("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OperadorComparacion ::= AND 
            {
              Node RESULT =null;
		 RESULT = new Node("AND"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OperadorComparacion ::= OR 
            {
              Node RESULT =null;
		 RESULT = new Node("OR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ExpresionIncDec ::= IDENTIFICADOR Incremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("update ++", new Node(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ExpresionIncDec ::= IDENTIFICADOR Decremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("update --", new Node(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

