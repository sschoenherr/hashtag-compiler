
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Sat Mar 14 17:59:50 CST 2015
//----------------------------------------------------

package hashtag;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Sat Mar 14 17:59:50 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\013\006\000\002\002" +
    "\004\000\002\015\005\000\002\015\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\002\000" +
    "\002\016\003\000\002\016\003\000\002\004\005\000\002" +
    "\012\003\000\002\012\003\000\002\005\004\000\002\006" +
    "\005\000\002\006\002\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\054\003\000\002\054\003\000\002" +
    "\062\003\000\002\062\003\000\002\010\004\000\002\010" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\017\003\000" +
    "\002\017\003\000\002\053\004\000\002\051\005\000\002" +
    "\050\004\000\002\050\002\000\002\047\005\000\002\047" +
    "\002\000\002\055\005\000\002\055\004\000\002\055\002" +
    "\000\002\057\004\000\002\052\006\000\002\056\003\000" +
    "\002\056\003\000\002\056\002\000\002\014\015\000\002" +
    "\014\002\000\002\061\005\000\002\061\002\000\002\063" +
    "\003\000\002\063\003\000\002\063\002\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\007\000\002" +
    "\036\007\000\002\033\007\000\002\034\005\000\002\034" +
    "\007\000\002\046\005\000\002\035\011\000\002\040\013" +
    "\000\002\040\011\000\002\041\003\000\002\041\003\000" +
    "\002\020\003\000\002\020\003\000\002\043\005\000\002" +
    "\043\005\000\002\043\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\003\000\002\045\005" +
    "\000\002\045\003\000\002\042\004\000\002\042\003\000" +
    "\002\042\003\000\002\037\005\000\002\037\004\000\002" +
    "\021\005\000\002\021\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\022\003\000\002\022\003\000" +
    "\002\024\004\000\002\024\004\000\002\025\004\000\002" +
    "\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\036\005\001\002\000\004\002\277\001" +
    "\002\000\006\026\uffce\043\007\001\002\000\004\026\273" +
    "\001\002\000\014\047\015\050\012\051\013\052\010\053" +
    "\014\001\002\000\004\020\uffe0\001\002\000\004\020\016" +
    "\001\002\000\004\020\uffe3\001\002\000\004\020\uffe2\001" +
    "\002\000\004\020\uffe1\001\002\000\004\020\uffe4\001\002" +
    "\000\004\022\017\001\002\000\016\021\uffd5\047\015\050" +
    "\012\051\013\052\010\053\014\001\002\000\004\020\267" +
    "\001\002\000\004\021\022\001\002\000\004\042\023\001" +
    "\002\000\034\020\045\032\050\033\034\035\025\037\ufff9" +
    "\040\030\045\ufff9\046\044\047\015\050\012\051\013\052" +
    "\010\053\014\001\002\000\036\020\uffc6\032\uffc6\033\uffc6" +
    "\035\uffc6\037\uffc6\040\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\004" +
    "\022\263\001\002\000\004\025\ufff7\001\002\000\004\025" +
    "\uffde\001\002\000\004\022\233\001\002\000\004\025\uffe5" +
    "\001\002\000\036\020\uffc4\032\uffc4\033\uffc4\035\uffc4\037" +
    "\uffc4\040\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\001\002\000\036\020\uffc7\032" +
    "\uffc7\033\uffc7\035\uffc7\037\uffc7\040\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\004\022\224\001\002\000\004\025\uffdf\001\002" +
    "\000\004\020\215\001\002\000\004\025\213\001\002\000" +
    "\036\020\uffc8\032\uffc8\033\uffc8\035\uffc8\037\uffc8\040\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\001\002\000\036\020\uffc3\032\uffc3\033\uffc3" +
    "\035\uffc3\037\uffc3\040\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\036" +
    "\020\uffc5\032\uffc5\033\uffc5\035\uffc5\037\uffc5\040\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\001\002\000\006\037\uffcc\045\203\001\002\000" +
    "\004\022\175\001\002\000\012\004\136\005\140\017\162" +
    "\022\163\001\002\000\036\020\045\032\050\033\034\035" +
    "\025\037\ufff9\040\030\044\ufff9\045\ufff9\046\044\047\015" +
    "\050\012\051\013\052\010\053\014\001\002\000\004\025" +
    "\156\001\002\000\004\022\052\001\002\000\004\025\ufff8" +
    "\001\002\000\014\047\015\050\012\051\013\052\010\053" +
    "\014\001\002\000\004\025\064\001\002\000\004\021\055" +
    "\001\002\000\004\042\056\001\002\000\034\020\045\032" +
    "\050\033\034\035\025\037\ufff9\040\030\042\056\046\044" +
    "\047\015\050\012\051\013\052\010\053\014\001\002\000" +
    "\036\020\uffc2\032\uffc2\033\uffc2\035\uffc2\037\uffc2\040\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\001\002\000\004\037\063\001\002\000\004" +
    "\037\062\001\002\000\040\020\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\037\ufffd\040\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000" +
    "\040\020\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\037\ufffe" +
    "\040\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\024\014\070\020\104" +
    "\022\071\061\103\062\106\063\076\064\067\065\102\066" +
    "\073\001\002\000\040\004\uffb3\005\uffb3\006\115\007\114" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\021" +
    "\uffb3\023\113\025\uffb3\030\uffb3\031\uffb3\001\002\000\016" +
    "\010\154\011\153\012\146\013\147\015\152\016\151\001" +
    "\002\000\026\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\021\uffe8\025\uffe8\030\uffe8\031\uffe8\001\002\000" +
    "\024\014\070\020\104\022\071\061\103\062\106\063\076" +
    "\064\067\065\102\066\073\001\002\000\012\020\104\022" +
    "\071\061\103\062\106\001\002\000\004\025\132\001\002" +
    "\000\026\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016" +
    "\uffea\021\uffea\025\uffea\030\uffea\031\uffea\001\002\000\012" +
    "\021\uffab\025\uffab\030\123\031\125\001\002\000\024\004" +
    "\110\005\111\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7" +
    "\016\uffe7\025\uffb6\001\002\000\026\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\021\uffec\025\uffec\030\uffec" +
    "\031\uffec\001\002\000\026\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\021\uffed\025\uffed\030\uffed\031\uffed" +
    "\001\002\000\040\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\021\uffad" +
    "\023\uffad\025\uffad\030\uffad\031\uffad\001\002\000\022\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\021\uffaa" +
    "\025\uffaa\001\002\000\026\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\015\uffe9\016\uffe9\021\uffe9\025\uffe9\030\uffe9\031\uffe9" +
    "\001\002\000\040\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\021\ufff0" +
    "\023\ufff0\025\ufff0\030\ufff0\031\ufff0\001\002\000\040\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\015\uffef\016\uffef\021\uffef\023\uffef\025\uffef\030" +
    "\uffef\031\uffef\001\002\000\040\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016" +
    "\uffaf\021\uffaf\023\uffaf\025\uffaf\030\uffaf\031\uffaf\001\002" +
    "\000\040\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\016\uffee\021\uffee\023\uffee" +
    "\025\uffee\030\uffee\031\uffee\001\002\000\004\025\uffb7\001" +
    "\002\000\012\020\104\022\071\061\103\062\106\001\002" +
    "\000\012\020\104\022\071\061\103\062\106\001\002\000" +
    "\040\004\uffb4\005\uffb4\006\115\007\114\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\015\uffb4\016\uffb4\021\uffb4\023\113\025" +
    "\uffb4\030\uffb4\031\uffb4\001\002\000\012\020\104\022\071" +
    "\061\103\062\106\001\002\000\012\020\104\022\071\061" +
    "\103\062\106\001\002\000\012\020\104\022\071\061\103" +
    "\062\106\001\002\000\040\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016\uffb1" +
    "\021\uffb1\023\uffb1\025\uffb1\030\uffb1\031\uffb1\001\002\000" +
    "\040\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\015\uffb2\016\uffb2\021\uffb2\023\uffb2\025" +
    "\uffb2\030\uffb2\031\uffb2\001\002\000\040\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\016\uffb0\021\uffb0\023\uffb0\025\uffb0\030\uffb0\031\uffb0" +
    "\001\002\000\040\004\uffb5\005\uffb5\006\115\007\114\010" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\021\uffb5" +
    "\023\113\025\uffb5\030\uffb5\031\uffb5\001\002\000\024\014" +
    "\070\020\104\022\071\061\103\062\106\063\076\064\067" +
    "\065\102\066\073\001\002\000\024\014\uff9f\020\uff9f\022" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\001\002\000\006\021\uffac\025\uffac\001\002\000\024\014" +
    "\uff9e\020\uff9e\022\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\001\002\000\026\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\016\uffeb\021\uffeb\025\uffeb\030\uffeb" +
    "\031\uffeb\001\002\000\012\021\uffa8\025\uffa8\030\123\031" +
    "\125\001\002\000\032\004\110\005\111\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\016\uffe7\021\uffe7\025\uffe7\030" +
    "\uffe7\031\uffe7\001\002\000\006\021\uffa9\025\uffa9\001\002" +
    "\000\004\020\133\001\002\000\006\004\136\005\140\001" +
    "\002\000\004\021\uffc1\001\002\000\006\021\uff9d\025\uff9d" +
    "\001\002\000\004\004\142\001\002\000\006\021\uff9c\025" +
    "\uff9c\001\002\000\004\005\141\001\002\000\006\021\uff9a" +
    "\025\uff9a\001\002\000\006\021\uff9b\025\uff9b\001\002\000" +
    "\010\004\110\005\111\021\144\001\002\000\040\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\015\uffae\016\uffae\021\uffae\023\uffae\025\uffae\030\uffae" +
    "\031\uffae\001\002\000\012\021\uffa6\025\uffa6\030\uffa6\031" +
    "\uffa6\001\002\000\022\020\uffa3\022\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\065\uffa3\066\uffa3\001\002\000\022\020" +
    "\uffa2\022\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\001\002\000\022\020\104\022\071\061\103\062" +
    "\106\063\076\064\067\065\102\066\073\001\002\000\022" +
    "\020\uffa1\022\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\022\020\uffa0\022\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\001\002\000" +
    "\022\020\uffa4\022\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\066\uffa4\001\002\000\022\020\uffa5\022\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001\002" +
    "\000\012\021\uffa7\025\uffa7\030\uffa7\031\uffa7\001\002\000" +
    "\036\020\045\032\050\033\034\035\025\037\ufff9\040\030" +
    "\044\ufff9\045\ufff9\046\044\047\015\050\012\051\013\052" +
    "\010\053\014\001\002\000\010\037\ufffa\044\ufffa\045\ufffa" +
    "\001\002\000\010\037\ufffb\044\ufffb\045\ufffb\001\002\000" +
    "\004\025\uffe6\001\002\000\022\020\104\022\071\061\103" +
    "\062\106\063\076\064\067\065\102\066\073\001\002\000" +
    "\006\020\165\021\uffda\001\002\000\006\021\uffdd\025\uffdd" +
    "\001\002\000\006\021\uffd8\024\170\001\002\000\004\021" +
    "\167\001\002\000\006\021\uffdc\025\uffdc\001\002\000\004" +
    "\020\172\001\002\000\004\021\uffdb\001\002\000\006\021" +
    "\uffd8\024\170\001\002\000\004\021\uffd9\001\002\000\004" +
    "\025\ufff3\001\002\000\024\020\201\021\uffd0\022\071\061" +
    "\103\062\106\063\076\064\067\065\102\066\073\001\002" +
    "\000\004\021\uffd1\001\002\000\004\021\uffd2\001\002\000" +
    "\004\021\202\001\002\000\022\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\021\uffef\022\163\023\uffef\025\uffef\001\002\000" +
    "\004\025\uffd3\001\002\000\024\020\201\022\071\025\uffc9" +
    "\061\103\062\106\063\076\064\067\065\102\066\073\001" +
    "\002\000\004\037\205\001\002\000\006\026\uffce\043\007" +
    "\001\002\000\004\026\uffcf\001\002\000\004\025\uffcb\001" +
    "\002\000\004\025\212\001\002\000\004\025\uffca\001\002" +
    "\000\004\037\uffcd\001\002\000\036\020\045\032\050\033" +
    "\034\035\025\037\ufff9\040\030\044\ufff9\045\ufff9\046\044" +
    "\047\015\050\012\051\013\052\010\053\014\001\002\000" +
    "\010\037\ufffc\044\ufffc\045\ufffc\001\002\000\010\017\162" +
    "\024\216\025\ufff1\001\002\000\004\020\222\001\002\000" +
    "\004\025\ufff4\001\002\000\004\025\ufff5\001\002\000\004" +
    "\025\ufff6\001\002\000\010\017\162\024\216\025\ufff1\001" +
    "\002\000\004\025\ufff2\001\002\000\024\014\070\020\104" +
    "\022\071\061\103\062\106\063\076\064\067\065\102\066" +
    "\073\001\002\000\004\042\056\001\002\000\040\020\uffbf" +
    "\032\uffbf\033\uffbf\034\227\035\uffbf\037\uffbf\040\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\001\002\000\004\042\056\001\002\000\036\020" +
    "\uffbe\032\uffbe\033\uffbe\035\uffbe\037\uffbe\040\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\001\002\000\004\021\232\001\002\000\004\042\uffbd" +
    "\001\002\000\004\020\234\001\002\000\004\021\235\001" +
    "\002\000\004\042\236\001\002\000\006\041\241\060\237" +
    "\001\002\000\004\027\255\001\002\000\004\037\254\001" +
    "\002\000\006\061\242\063\244\001\002\000\004\027\uffb9" +
    "\001\002\000\004\027\245\001\002\000\004\027\uffb8\001" +
    "\002\000\004\042\246\001\002\000\032\020\045\032\050" +
    "\033\034\035\025\040\030\044\ufff9\046\044\047\015\050" +
    "\012\051\013\052\010\053\014\001\002\000\004\044\250" +
    "\001\002\000\004\025\251\001\002\000\004\037\252\001" +
    "\002\000\006\041\241\060\237\001\002\000\004\037\uffbb" +
    "\001\002\000\036\020\uffbc\032\uffbc\033\uffbc\035\uffbc\037" +
    "\uffbc\040\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\001\002\000\004\042\256\001" +
    "\002\000\032\020\045\032\050\033\034\035\025\040\030" +
    "\044\ufff9\046\044\047\015\050\012\051\013\052\010\053" +
    "\014\001\002\000\004\044\260\001\002\000\004\025\261" +
    "\001\002\000\004\037\262\001\002\000\004\037\uffba\001" +
    "\002\000\024\014\070\020\104\022\071\061\103\062\106" +
    "\063\076\064\067\065\102\066\073\001\002\000\004\021" +
    "\265\001\002\000\004\042\056\001\002\000\036\020\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\037\uffc0\040\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\006\021\uffd6\024\270\001\002\000\016\021" +
    "\uffd5\047\015\050\012\051\013\052\010\053\014\001\002" +
    "\000\004\021\uffd7\001\002\000\004\021\uffd4\001\002\000" +
    "\004\042\056\001\002\000\004\037\275\001\002\000\004" +
    "\002\000\001\002\000\004\037\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\013\003\001\001\000\002\001\001\000" +
    "\004\014\005\001\001\000\004\002\273\001\001\000\004" +
    "\007\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\017\055\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\042\004\050\007\035\010\046\016\036\017" +
    "\025\024\030\027\045\030\037\031\032\032\023\033\041" +
    "\034\031\035\040\052\034\053\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\203\001\001" +
    "\000\002\001\001\000\012\005\160\025\134\026\136\051" +
    "\163\001\001\000\042\003\157\004\050\007\035\010\046" +
    "\016\036\017\025\024\030\027\045\030\037\031\032\032" +
    "\023\033\041\034\031\035\040\052\034\053\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\052\007\035\036\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\056\001\001\000\044\003" +
    "\057\004\050\007\035\010\046\015\060\016\036\017\025" +
    "\024\030\027\045\030\037\031\032\032\023\033\041\034" +
    "\031\035\040\052\034\053\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\065\020\071\021\073\042\106" +
    "\043\074\044\064\045\104\054\100\060\077\062\076\001" +
    "\001\000\002\001\001\000\004\023\147\001\001\000\002" +
    "\001\001\000\022\011\065\021\144\043\127\044\064\045" +
    "\104\054\125\060\077\062\076\001\001\000\012\043\142" +
    "\044\064\045\104\060\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\121\037\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\120\045\104\060\077\001\001" +
    "\000\010\044\111\045\104\060\077\001\001\000\002\001" +
    "\001\000\006\045\117\060\077\001\001\000\006\045\116" +
    "\060\077\001\001\000\006\045\115\060\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\011\065\021\126\043\127\044\064\045" +
    "\104\054\125\060\077\062\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\121\037\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\133\001\001\000\006\025\134\026" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\154\043\127\044\064\045\104\054\125\060\077" +
    "\062\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\156\004\050\007\035\010\046\016\036\017\025\024" +
    "\030\027\045\030\037\031\032\032\023\033\041\034\031" +
    "\035\040\052\034\053\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\173\043\127" +
    "\044\064\045\104\054\125\060\077\062\076\001\001\000" +
    "\004\050\165\001\001\000\002\001\001\000\004\047\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\176\043\127\044" +
    "\064\045\104\053\175\054\125\056\177\060\077\062\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\163\001\001\000\002\001\001\000\024" +
    "\011\210\043\127\044\064\045\104\053\206\054\125\060" +
    "\077\062\076\063\207\001\001\000\002\001\001\000\004" +
    "\014\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\213\004\050\007\035\010\046\016\036\017\025\024" +
    "\030\027\045\030\037\031\032\032\023\033\041\034\031" +
    "\035\040\052\034\053\026\001\001\000\002\001\001\000" +
    "\010\005\217\006\216\012\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\217\006\216\012\222\001\001\000\002\001\001" +
    "\000\024\011\065\021\073\042\230\043\127\044\064\045" +
    "\104\054\100\060\077\062\076\001\001\000\004\015\225" +
    "\001\001\000\002\001\001\000\004\015\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\246\004\050" +
    "\007\035\010\046\016\036\017\025\024\030\027\045\030" +
    "\037\031\032\032\023\033\041\034\031\035\040\052\034" +
    "\053\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\256\004" +
    "\050\007\035\010\046\016\036\017\025\024\030\027\045" +
    "\030\037\031\032\032\023\033\041\034\031\035\040\052" +
    "\034\053\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\065\021" +
    "\073\042\263\043\127\044\064\045\104\054\100\060\077" +
    "\062\076\001\001\000\002\001\001\000\004\015\265\001" +
    "\001\000\002\001\001\000\004\057\270\001\001\000\006" +
    "\007\017\055\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Node> AST = new ArrayList();

    public void report_error(String message, Object info){
      StringBuilder m = new StringBuilder("Error");
      if(info instanceof java_cup.runtime.Symbol){
           java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
           if(s.left >= 0){
            m.append(" en la linea " + (s.left+1));
             if(s.right >=0)
               m.append(", columna " + (s.right+1));
          }
          m.append(" @ symbol: " + s);
        }
         m.append(" : " + message);
         Interfaz.console.setText(Interfaz.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
       report_error(message, info);
       //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Body2 Main END 
            {
              Node RESULT =null;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node b2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                        RESULT = new Node("Program", b2, mn);
                                        parser.AST.add(RESULT);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAINBEGIN Stmts 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("main", st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Stmts ::= DO Body END 
            {
              Node RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("block", bd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stmts ::= DO Stmts END 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Body ::= Instruccion PUNTOCOMA Body 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Body ::= Bloque Body 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Body ::= Asignacion PUNTOCOMA Body 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Body ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruccion ::= DeclaracionVariable 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruccion ::= Llamado 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclaracionVariable ::= Type IDENTIFICADOR Var 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariable",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var ::= DeclaracionSimple 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var ::= DeclaracionMultiple 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclaracionSimple ::= ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = av; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionSimple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclaracionMultiple ::= COMA IDENTIFICADOR Var 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionMultiple",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclaracionMultiple ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionMultiple",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Valor ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(num)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Valor ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("id"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Valor ::= REAL 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Double.toString(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AsigValor ::= Cadena 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AsigValor ::= CARACTER 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AsigValor ::= Booleana 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Booleana ::= TRUE 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Booleana ::= FALSE 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Cadena ::= CADENA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Cadena ::= ExpresionAritmetica 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Asignacion ::= IDENTIFICADOR DeclaracionSimple 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ds = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("=",new Node("id"), ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asignacion ::= ExpresionIncDec 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= INT 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= DOUBLE 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= CHAR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= BOOLEAN 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= STRING 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Llamado ::= Print 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Llamado ::= LlamadoMetodos 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LlamadoMetodos ::= IDENTIFICADOR Contenido 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Contenido ::= PARIZQ SubContenido PARDER 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SubContenido ::= IDENTIFICADOR T 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SubContenido",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SubContenido ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SubContenido",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // T ::= COMA IDENTIFICADOR T 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parametros ::= Type IDENTIFICADOR Multiple 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Parametros ::= Type IDENTIFICADOR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Parametros ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Multiple ::= COMA Parametros 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Multiple",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Print ::= PRINT PARIZQ x PARDER 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // x ::= AsigValor 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("x",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // x ::= LlamadoMetodos 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("x",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // x ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("x",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Body2 ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER DO Body EndFunction END Body2 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Body2 ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EndFunction ::= RETURN Return PUNTOCOMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndFunction",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EndFunction ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndFunction",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Return ::= LlamadoMetodos 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Return ::= AsigValor 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Return ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bloque ::= Loops 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bloque ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Loops ::= ForLoop 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Loops ::= WhileLoop 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Conditional ::= IfConditional 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Conditional ::= SwitchConditional 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ForLoop ::= FOR PARIZQ ExprFor PARDER Stmts 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprFor ::= DeclaracionVariable PUNTOCOMA Expresion PUNTOCOMA ExpresionIncDec 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprFor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WhileLoop ::= WHILE PARIZQ ExpresionBooleana PARDER Stmts 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfConditional ::= IF ConditionGroup Stmts 
            {
              Node RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cg = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cg, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfConditional ::= IF ConditionGroup Stmts ELSE Stmts 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ConditionGroup ::= PARIZQ ExpresionBooleana PARDER 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionGroup",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SwitchConditional ::= SWITCH PARIZQ IDENTIFICADOR PARDER DO ExpresionSwitch END 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpresionSwitch ::= CASE Switch DOSPUNTOS DO Body BREAK PUNTOCOMA END ExpresionSwitch 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionSwitch",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpresionSwitch ::= OTHER DOSPUNTOS DO Body BREAK PUNTOCOMA END 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionSwitch",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Switch ::= NUMERO 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Switch ::= CARACTER 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion ::= ExpresionBooleana 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion ::= ExpresionAritmetica 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpresionAritmetica ::= ExpresionAritmetica SUMA Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("+",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpresionAritmetica ::= ExpresionAritmetica MENOS Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("-",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpresionAritmetica ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= Factor MULT Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("*",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= Factor DIV Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("/",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= Factor MOD Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("%",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Term ::= PARIZQ ExpresionAritmetica PARDER 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Term ::= Valor 
            {
              Node RESULT =null;
		int vlrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vlr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vlr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpresionBooleana ::= ExpresionComparacion UnionExpresion 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionBooleana ::= ExpresionComparacion 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionBooleana ::= Booleana 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UnionExpresion ::= OperadorComparacion ExpresionComparacion UnionExpresion 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // UnionExpresion ::= OperadorComparacion ExpresionComparacion 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionComparacion ::= AsigValor OperadorRelacional AsigValor 
            {
              Node RESULT =null;
		int av1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int av1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node av1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int av2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int av2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(oprel.label, av1, av2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionComparacion ::= NOT ExpresionComparacion 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OperadorRelacional ::= MAYOR 
            {
              Node RESULT =null;
		 RESULT = new Node(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadorRelacional ::= MENOR 
            {
              Node RESULT =null;
		 RESULT = new Node("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadorRelacional ::= MAYORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OperadorRelacional ::= MENORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OperadorRelacional ::= IGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OperadorRelacional ::= DIFERENTE 
            {
              Node RESULT =null;
		 RESULT = new Node("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OperadorComparacion ::= AND 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OperadorComparacion ::= OR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionIncDec ::= IDENTIFICADOR Incremento 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionIncDec ::= IDENTIFICADOR Decremento 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

