
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Wed Mar 18 12:17:12 CST 2015
//----------------------------------------------------

package hashtag;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Wed Mar 18 12:17:12 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\010\006\000\002\010" +
    "\005\000\002\064\003\000\002\002\004\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\003\004\000" +
    "\002\003\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\060\004\000\002\062\005\000\002\062\003" +
    "\000\002\063\003\000\002\061\005\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\051\003\000\002\051" +
    "\003\000\002\056\003\000\002\056\003\000\002\006\005" +
    "\000\002\006\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\015\003\000\002\015\003\000\002\050\006\000\002\050" +
    "\005\000\002\045\005\000\002\045\003\000\002\052\005" +
    "\000\002\052\004\000\002\052\002\000\002\053\004\000" +
    "\002\047\006\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\002\000\002\011\004\000\002\011" +
    "\003\000\002\012\011\000\002\012\011\000\002\055\010" +
    "\000\002\055\007\000\002\057\003\000\002\057\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\007\000\002\033\010\000\002\030\007\000\002\031\005" +
    "\000\002\031\007\000\002\044\005\000\002\044\005\000" +
    "\002\032\011\000\002\032\011\000\002\036\004\000\002" +
    "\036\003\000\002\037\010\000\002\037\007\000\002\035" +
    "\003\000\002\035\003\000\002\041\005\000\002\041\005" +
    "\000\002\041\003\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\003\000\002\043\005\000\002" +
    "\043\003\000\002\040\004\000\002\040\003\000\002\040" +
    "\003\000\002\034\005\000\002\034\004\000\002\016\005" +
    "\000\002\016\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\004\000\002\021\004\000\002\022\004\000\002\023\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\035\005\001\002\000\004\002\320\001" +
    "\002\000\006\025\007\042\013\001\002\000\004\025\ufffe" +
    "\001\002\000\004\041\030\001\002\000\006\025\uffcb\042" +
    "\013\001\002\000\004\025\007\001\002\000\004\036\313" +
    "\001\002\000\016\046\022\047\014\050\021\051\016\052" +
    "\020\060\017\001\002\000\004\065\uffdf\001\002\000\004" +
    "\065\271\001\002\000\004\065\uffdc\001\002\000\004\065" +
    "\023\001\002\000\004\065\uffdd\001\002\000\004\065\uffde" +
    "\001\002\000\004\065\uffe0\001\002\000\004\021\024\001" +
    "\002\000\016\020\uffd3\046\022\047\014\050\021\051\016" +
    "\052\020\001\002\000\004\065\265\001\002\000\004\020" +
    "\027\001\002\000\004\041\030\001\002\000\034\031\063" +
    "\032\046\034\035\036\040\037\044\041\030\045\056\046" +
    "\022\047\014\050\021\051\016\052\020\065\057\001\002" +
    "\000\006\025\uffca\042\uffca\001\002\000\034\031\uffc2\032" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\065\uffc2\001\002\000" +
    "\034\031\063\032\046\034\035\036\ufff8\037\044\044\ufff8" +
    "\045\056\046\022\047\014\050\021\051\016\052\020\065" +
    "\057\001\002\000\004\024\ufff3\001\002\000\004\021\260" +
    "\001\002\000\006\017\256\024\ufff4\001\002\000\004\024" +
    "\uffda\001\002\000\044\025\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\036\ufffa\037\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\065\ufffa" +
    "\001\002\000\004\024\ufff2\001\002\000\004\036\255\001" +
    "\002\000\004\024\uffe1\001\002\000\004\021\223\001\002" +
    "\000\034\031\uffc3\032\uffc3\034\uffc3\036\uffc3\037\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\065\uffc3\001\002\000\004\021\212\001\002\000\034\031" +
    "\uffc0\032\uffc0\034\uffc0\036\uffc0\037\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\065\uffc0\001" +
    "\002\000\004\024\uffdb\001\002\000\004\065\207\001\002" +
    "\000\004\024\204\001\002\000\034\031\uffc4\032\uffc4\034" +
    "\uffc4\036\uffc4\037\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\065\uffc4\001\002\000\034\031" +
    "\uffbf\032\uffbf\034\uffbf\036\uffbf\037\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\065\uffbf\001" +
    "\002\000\034\031\uffc1\032\uffc1\034\uffc1\036\uffc1\037\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\065\uffc1\001\002\000\004\021\176\001\002\000\012" +
    "\004\121\005\122\017\161\021\167\001\002\000\034\031" +
    "\ufff6\032\ufff6\034\ufff6\036\ufff6\037\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\065\ufff6\001" +
    "\002\000\004\024\166\001\002\000\004\036\165\001\002" +
    "\000\004\021\064\001\002\000\004\046\066\001\002\000" +
    "\004\020\163\001\002\000\004\065\067\001\002\000\010" +
    "\004\121\005\122\017\161\001\002\000\004\024\071\001" +
    "\002\000\024\014\075\021\076\061\107\062\112\063\102" +
    "\064\074\065\110\066\106\067\077\001\002\000\042\004" +
    "\uffad\005\uffad\006\132\007\131\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\015\uffad\016\uffad\020\uffad\022\130\023\uffad\024" +
    "\uffad\027\uffad\030\uffad\001\002\000\016\010\157\011\156" +
    "\012\151\013\152\015\155\016\154\001\002\000\030\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\023\uffe4\024\uffe4\027\uffe4\030\uffe4\001\002\000\024\014" +
    "\075\021\076\061\107\062\112\063\102\064\074\065\110" +
    "\066\106\067\077\001\002\000\012\021\076\061\107\062" +
    "\112\065\110\001\002\000\030\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\015\uffe6\016\uffe6\020\uffe6\023\uffe6\024\uffe6\027" +
    "\uffe6\030\uffe6\001\002\000\012\020\uffa5\024\uffa5\027\140" +
    "\030\142\001\002\000\034\004\125\005\126\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\020\uffe3\023\uffe3" +
    "\024\uffe3\027\uffe3\030\uffe3\001\002\000\030\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\020\uffe8\023\uffe8" +
    "\024\uffe8\027\uffe8\030\uffe8\001\002\000\030\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\020\uffe9\023\uffe9" +
    "\024\uffe9\027\uffe9\030\uffe9\001\002\000\042\004\uffa7\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\015\uffa7\016\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\027" +
    "\uffa7\030\uffa7\001\002\000\022\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\015\uffe7\016\uffe7\020\uffa4\024\uffa4\001\002\000" +
    "\030\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5" +
    "\020\uffe5\023\uffe5\024\uffe5\027\uffe5\030\uffe5\001\002\000" +
    "\042\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\016\uffec\020\uffec\022\uffec\023" +
    "\uffec\024\uffec\027\uffec\030\uffec\001\002\000\042\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\027\uffeb\030\uffeb\001\002\000\042\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9" +
    "\016\uffa9\020\uffa9\022\uffa9\023\uffa9\024\uffa9\027\uffa9\030" +
    "\uffa9\001\002\000\042\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\020" +
    "\uffea\022\uffea\023\uffea\024\uffea\027\uffea\030\uffea\001\002" +
    "\000\004\024\114\001\002\000\004\065\115\001\002\000" +
    "\006\004\121\005\122\001\002\000\004\020\uffbd\001\002" +
    "\000\006\020\uff97\024\uff97\001\002\000\006\020\uff96\024" +
    "\uff96\001\002\000\004\004\124\001\002\000\004\005\123" +
    "\001\002\000\006\020\uff94\024\uff94\001\002\000\006\020" +
    "\uff95\024\uff95\001\002\000\012\021\076\061\107\062\112" +
    "\065\110\001\002\000\012\021\076\061\107\062\112\065" +
    "\110\001\002\000\042\004\uffae\005\uffae\006\132\007\131" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\015\uffae\016\uffae\020" +
    "\uffae\022\130\023\uffae\024\uffae\027\uffae\030\uffae\001\002" +
    "\000\012\021\076\061\107\062\112\065\110\001\002\000" +
    "\012\021\076\061\107\062\112\065\110\001\002\000\012" +
    "\021\076\061\107\062\112\065\110\001\002\000\042\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\015\uffab\016\uffab\020\uffab\022\uffab\023\uffab\024" +
    "\uffab\027\uffab\030\uffab\001\002\000\042\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\015" +
    "\uffac\016\uffac\020\uffac\022\uffac\023\uffac\024\uffac\027\uffac" +
    "\030\uffac\001\002\000\042\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa" +
    "\020\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa\030\uffaa\001" +
    "\002\000\042\004\uffaf\005\uffaf\006\132\007\131\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf\020\uffaf\022" +
    "\130\023\uffaf\024\uffaf\027\uffaf\030\uffaf\001\002\000\024" +
    "\014\075\021\076\061\107\062\112\063\102\064\074\065" +
    "\110\066\106\067\077\001\002\000\024\014\uff99\021\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\001\002\000\006\020\uffa6\024\uffa6\001\002\000\024" +
    "\014\uff98\021\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\001\002\000\030\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\016\uffe7\020\uffe7\023\uffe7\024" +
    "\uffe7\027\uffe7\030\uffe7\001\002\000\012\020\uffa2\024\uffa2" +
    "\027\140\030\142\001\002\000\006\020\uffa3\024\uffa3\001" +
    "\002\000\010\004\125\005\126\020\147\001\002\000\042" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\015\uffa8\016\uffa8\020\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\027\uffa8\030\uffa8\001\002\000\012\020\uffa0\024" +
    "\uffa0\027\uffa0\030\uffa0\001\002\000\022\021\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\001" +
    "\002\000\022\021\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\066\uff9c\067\uff9c\001\002\000\022\021\076\061" +
    "\107\062\112\063\102\064\074\065\110\066\106\067\077" +
    "\001\002\000\022\021\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\001\002\000\022\021\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\001\002\000\022\021\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\001\002\000\022\021" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\067\uff9f\001\002\000\012\020\uffa1\024\uffa1\027\uffa1\030" +
    "\uffa1\001\002\000\022\021\076\061\107\062\112\063\102" +
    "\064\074\065\110\066\106\067\077\001\002\000\004\024" +
    "\uffe2\001\002\000\004\041\030\001\002\000\034\031\uffbe" +
    "\032\uffbe\034\uffbe\036\uffbe\037\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\065\uffbe\001\002" +
    "\000\044\025\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\036" +
    "\ufffb\037\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\065\ufffb\001\002\000" +
    "\034\031\ufff5\032\ufff5\034\ufff5\036\ufff5\037\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\065" +
    "\ufff5\001\002\000\024\020\171\021\076\061\107\062\112" +
    "\063\102\064\074\065\110\066\106\067\077\001\002\000" +
    "\006\020\uffd6\023\174\001\002\000\006\020\uffd8\024\uffd8" +
    "\001\002\000\004\020\173\001\002\000\006\020\uffd9\024" +
    "\uffd9\001\002\000\022\021\076\061\107\062\112\063\102" +
    "\064\074\065\110\066\106\067\077\001\002\000\004\020" +
    "\uffd7\001\002\000\010\020\uffcd\064\202\065\200\001\002" +
    "\000\004\020\uffce\001\002\000\006\020\uffd0\021\167\001" +
    "\002\000\004\020\203\001\002\000\004\020\uffcf\001\002" +
    "\000\004\024\uffd1\001\002\000\034\031\ufff7\032\ufff7\034" +
    "\ufff7\036\ufff7\037\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\065\ufff7\001\002\000\010\017" +
    "\uffef\023\210\024\uffef\001\002\000\006\017\ufff1\024\ufff1" +
    "\001\002\000\010\017\uffee\023\uffee\024\uffee\001\002\000" +
    "\004\065\207\001\002\000\006\017\ufff0\024\ufff0\001\002" +
    "\000\024\014\075\021\076\061\107\062\112\063\102\064" +
    "\074\065\217\066\106\067\077\001\002\000\004\041\030" +
    "\001\002\000\036\031\uffbb\032\uffbb\033\215\034\uffbb\036" +
    "\uffbb\037\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\065\uffbb\001\002\000\004\041\030\001" +
    "\002\000\034\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\065\uffba\001\002\000\032\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\020\222\022\uffeb\001\002\000\004\020\221\001\002" +
    "\000\004\041\uffb9\001\002\000\004\041\uffb8\001\002\000" +
    "\010\061\224\063\227\065\226\001\002\000\006\020\uffb1" +
    "\026\uffb1\001\002\000\004\020\251\001\002\000\004\020" +
    "\230\001\002\000\006\020\uffb0\026\uffb0\001\002\000\004" +
    "\041\231\001\002\000\006\040\235\057\232\001\002\000" +
    "\004\026\245\001\002\000\004\036\244\001\002\000\010" +
    "\036\uffb4\040\235\057\232\001\002\000\006\061\224\063" +
    "\227\001\002\000\004\026\237\001\002\000\004\041\030" +
    "\001\002\000\004\043\241\001\002\000\004\024\242\001" +
    "\002\000\010\036\uffb3\040\uffb3\057\uffb3\001\002\000\004" +
    "\036\uffb5\001\002\000\034\031\uffb7\032\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\065\uffb7\001\002\000\004\041\030\001" +
    "\002\000\004\043\247\001\002\000\004\024\250\001\002" +
    "\000\010\036\uffb2\040\uffb2\057\uffb2\001\002\000\004\041" +
    "\252\001\002\000\006\040\235\057\232\001\002\000\004" +
    "\036\254\001\002\000\034\031\uffb6\032\uffb6\034\uffb6\036" +
    "\uffb6\037\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\065\uffb6\001\002\000\044\025\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc\037\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\065\ufffc\001\002\000\022\021\076\061\107" +
    "\062\112\063\102\064\074\065\110\066\106\067\077\001" +
    "\002\000\004\024\uffed\001\002\000\024\014\075\021\076" +
    "\061\107\062\112\063\102\064\074\065\110\066\106\067" +
    "\077\001\002\000\004\020\262\001\002\000\004\041\030" +
    "\001\002\000\034\031\uffbc\032\uffbc\034\uffbc\036\uffbc\037" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\065\uffbc\001\002\000\006\036\ufff9\044\ufff9\001" +
    "\002\000\006\020\uffd4\023\266\001\002\000\016\020\uffd3" +
    "\046\022\047\014\050\021\051\016\052\020\001\002\000" +
    "\004\020\uffd5\001\002\000\004\020\uffd2\001\002\000\004" +
    "\021\272\001\002\000\016\020\uffd3\046\022\047\014\050" +
    "\021\051\016\052\020\001\002\000\004\020\274\001\002" +
    "\000\004\041\275\001\002\000\032\031\063\032\046\034" +
    "\035\037\044\044\277\045\056\046\022\047\014\050\021" +
    "\051\016\052\020\065\057\001\002\000\006\025\uffc9\042" +
    "\uffc9\001\002\000\022\021\076\061\107\062\112\063\102" +
    "\064\074\065\305\066\106\067\077\001\002\000\004\044" +
    "\301\001\002\000\022\021\076\061\107\062\112\063\102" +
    "\064\074\065\305\066\106\067\077\001\002\000\004\024" +
    "\uffc6\001\002\000\004\024\306\001\002\000\004\024\uffc5" +
    "\001\002\000\020\004\uffeb\005\uffeb\006\uffeb\007\uffeb\021" +
    "\167\022\uffeb\024\uffeb\001\002\000\004\036\307\001\002" +
    "\000\006\025\uffc8\042\uffc8\001\002\000\004\024\311\001" +
    "\002\000\004\036\312\001\002\000\006\025\uffc7\042\uffc7" +
    "\001\002\000\004\002\uffff\001\002\000\004\036\315\001" +
    "\002\000\004\002\000\001\002\000\004\025\uffcc\001\002" +
    "\000\004\036\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\010\003\001\001\000\002\001\001\000" +
    "\012\002\011\011\005\012\007\064\010\001\001\000\002" +
    "\001\001\000\004\013\316\001\001\000\006\011\315\012" +
    "\007\001\001\000\004\002\313\001\001\000\002\001\001" +
    "\000\004\005\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\024\052\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\030\001\001\000\050\003\041\004" +
    "\032\005\050\006\060\013\061\014\051\015\040\021\042" +
    "\024\057\025\052\026\044\027\031\030\054\031\046\032" +
    "\053\047\047\050\036\060\035\061\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\263\004\032\005" +
    "\050\006\060\014\051\015\040\021\042\024\057\025\052" +
    "\026\044\027\031\030\054\031\046\032\053\047\047\050" +
    "\036\060\035\061\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\062\205" +
    "\063\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\116\023\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\064" +
    "\001\001\000\002\001\001\000\006\006\067\021\042\001" +
    "\001\000\006\022\116\023\117\001\001\000\002\001\001" +
    "\000\024\007\072\016\077\040\112\041\100\042\071\043" +
    "\110\051\104\054\103\056\102\001\001\000\002\001\001" +
    "\000\004\020\152\001\001\000\002\001\001\000\022\007" +
    "\072\016\147\041\100\042\071\043\110\051\142\054\103" +
    "\056\102\001\001\000\012\041\145\042\071\043\110\054" +
    "\103\001\001\000\002\001\001\000\006\017\136\034\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\115\001\001" +
    "\000\006\022\116\023\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\135\043\110\054\103\001\001\000\010\042\126\043\110" +
    "\054\103\001\001\000\002\001\001\000\006\043\134\054" +
    "\103\001\001\000\006\043\133\054\103\001\001\000\006" +
    "\043\132\054\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\072" +
    "\016\143\041\100\042\071\043\110\051\142\054\103\056" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\136\034\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\157\041\100\042\071\043\110\051\142\054\103" +
    "\056\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\161\041\100\042\071\043\110\051\142\054\103\056" +
    "\102\001\001\000\002\001\001\000\004\013\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\167\041\100\042\071\043\110\045\171\051\142" +
    "\054\103\056\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\167" +
    "\041\100\042\071\043\110\045\174\051\142\054\103\056" +
    "\102\001\001\000\002\001\001\000\006\046\200\050\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\210\063\204\001\001\000\002\001\001\000\024" +
    "\007\072\016\077\040\217\041\100\042\071\043\110\051" +
    "\104\054\103\056\102\001\001\000\004\013\213\001\001" +
    "\000\002\001\001\000\004\013\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\232\037\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\242\037\233" +
    "\001\001\000\004\035\235\001\001\000\002\001\001\000" +
    "\004\013\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\252\037" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\256\041\100\042\071\043\110\051" +
    "\142\054\103\056\102\001\001\000\002\001\001\000\024" +
    "\007\072\016\077\040\260\041\100\042\071\043\110\051" +
    "\104\054\103\056\102\001\001\000\002\001\001\000\004" +
    "\013\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\266\001\001\000\006\005\024\052\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\024\052\272\001\001\000\002\001\001\000\004" +
    "\055\275\001\001\000\046\003\277\004\032\005\050\006" +
    "\060\014\051\015\040\021\042\024\057\025\052\026\044" +
    "\027\031\030\054\031\046\032\053\047\047\050\036\060" +
    "\035\061\033\001\001\000\002\001\001\000\024\007\303" +
    "\041\100\042\071\043\110\050\301\051\142\054\103\056" +
    "\102\057\307\001\001\000\002\001\001\000\024\007\303" +
    "\041\100\042\071\043\110\050\301\051\142\054\103\056" +
    "\102\057\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Node> AST = new ArrayList();

    public void report_error(String message, Object info){
      StringBuilder m = new StringBuilder("Error");
      if(info instanceof java_cup.runtime.Symbol){
           java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
           if(s.left >= 0){
            m.append(" en la linea " + (s.left+1));
             if(s.right >=0)
               m.append(", columna " + (s.right+1));
          }
          m.append(" @ symbol: " + s);
        }
         m.append(" : " + message);
         Interfaz.console.setText(Interfaz.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
       report_error(message, info);
       //System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Functions Main END 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                        RESULT = new Node("PROG", f, mn);
                                        parser.AST.add(RESULT);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= BEGIN Main END 
            {
              Node RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PROG", mn);
                                       parser.AST.add(RESULT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Functions ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = new Node("FUNCTIONS",fl);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAINBEGIN Stmts 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("MAIN",st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stmts ::= DO BodyList END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        RESULT = bdl;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stmts ::= DO Stmts END 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmts ::= DO END 
            {
              Node RESULT =null;
		 RESULT = new Node("λ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmts",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BodyList ::= BodyPart BodyList 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = bdl.add(bp);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BodyList ::= BodyPart 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body", bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BodyPart ::= Instruccion PUNTOCOMA 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BodyPart ::= Bloque 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BodyPart ::= Asignacion PUNTOCOMA 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruccion ::= VarDeclare 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruccion ::= VarInit 
            {
              Node RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruccion ::= Llamado 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclare ::= Type VarDeclarationList 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        Node node = new Node(vdl.label);
                                        RESULT = new Node("declare",vdl.getChildren()).add(node);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclare",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclarationList ::= VarDeclarationPart COMA VarDeclarationList 
            {
              Node RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vdp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdl.add(vdp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclarationList ::= VarDeclarationPart 
            {
              Node RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclarationPart ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationPart",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarInit ::= VarDeclare ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",vd,av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Valor ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(num)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Valor ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Valor ::= REAL 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Double.toString(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AsigValor ::= Cadena 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AsigValor ::= CARACTER 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("'"+Character.toString(ch)+"'"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AsigValor ::= Booleana 
            {
              Node RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bool = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigValor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Booleana ::= TRUE 
            {
              Node RESULT =null;
		 RESULT = new Node("true"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Booleana ::= FALSE 
            {
              Node RESULT =null;
		 RESULT = new Node("false"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleana",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Cadena ::= CADENA 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("\""+cad+"\""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Cadena ::= ExpresionAritmetica 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cadena",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= IDENTIFICADOR ASIGNACION AsigValor 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",new Node(id), av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asignacion ::= ExpresionIncDec 
            {
              Node RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = update; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= INT 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= DOUBLE 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= CHAR 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= BOOLEAN 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= STRING 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Llamado ::= Print 
            {
              Node RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Llamado ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LlamadoMetodos ::= IDENTIFICADOR PARIZQ Contenido PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("function_call",new Node(id),cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LlamadoMetodos ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("function_call", new Node(id), new Node("params",new Node("λ"))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Contenido ::= AsigValor COMA Contenido 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cont.add(av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Contenido ::= AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params",av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Parametros ::= Type IDENTIFICADOR Multiple 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mult = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params", new Node(id), mult); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Parametros ::= Type IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params", new Node(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Parametros ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("params", new Node("λ")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Multiple ::= COMA Parametros 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Multiple",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Print ::= PRINT PARIZQ PrintParam PARDER 
            {
              Node RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PRINT", pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PrintParam ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PrintParam ::= CADENA 
            {
              Node RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("\""+cad+"\""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PrintParam ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PrintParam ::= 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunctionList ::= FunctionPart FunctionList 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.add(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunctionList ::= FunctionPart 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunctionPart ::= FUNCTION VOID IDENTIFICADOR PARIZQ Parametros PARDER Stmts 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id, param, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FunctionPart ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER EndFunction 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ef = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id,param,ef); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EndFunction ::= DO BodyList RETURN Return PUNTOCOMA END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node rt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("branch", bdl, rt);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndFunction",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EndFunction ::= DO RETURN Return PUNTOCOMA END 
            {
              Node RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node rt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = rt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EndFunction",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Return ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN",lm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Return ::= AsigValor 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN", av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bloque ::= Loops 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bloque ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Loops ::= ForLoop 
            {
              Node RESULT =null;
		int flpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node flp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = flp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Loops ::= WhileLoop 
            {
              Node RESULT =null;
		int wlpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wlp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wlp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Conditional ::= IfConditional 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Conditional ::= SwitchConditional 
            {
              Node RESULT =null;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node swc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = swc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForLoop ::= FOR PARIZQ ExprFor PARDER Stmts 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FOR", expr, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForLoop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExprFor ::= INT Asignacion PUNTOCOMA ExpresionBooleana PUNTOCOMA ExpresionIncDec 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exprb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("structure",asig,exprb,update); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprFor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileLoop ::= WHILE PARIZQ ExpresionBooleana PARDER Stmts 
            {
              Node RESULT =null;
		int exprbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exprb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("WHILE", exprb, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileLoop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IfConditional ::= IF ConditionGroup Stmts 
            {
              Node RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cg = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cg, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IfConditional ::= IF ConditionGroup Stmts ELSE Stmts 
            {
              Node RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node cg = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",cg,st1,new Node("ELSE",st2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfConditional",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ConditionGroup ::= PARIZQ ExpresionBooleana PARDER 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionGroup",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ConditionGroup ::= PARIZQ IDENTIFICADOR PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionGroup",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SwitchConditional ::= SWITCH PARIZQ IDENTIFICADOR PARDER DO ExprSwitchList END 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", new Node(id), exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SwitchConditional ::= SWITCH PARIZQ Switch PARDER DO ExprSwitchList END 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", sw, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchConditional",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExprSwitchList ::= ExprSwitchPart ExprSwitchList 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprl.add(exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExprSwitchList ::= ExprSwitchPart 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExprSwitchPart ::= CASE Switch DOSPUNTOS Stmts BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("CASE", sw, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExprSwitchPart ::= OTHER DOSPUNTOS Stmts BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("OTHER", st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchPart",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Switch ::= NUMERO 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Switch ::= CARACTER 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Character.toString(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpresionAritmetica ::= ExpresionAritmetica SUMA Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("+",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpresionAritmetica ::= ExpresionAritmetica MENOS Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("-",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpresionAritmetica ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= Factor MULT Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("*",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Factor ::= Factor DIV Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("/",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= Factor MOD Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("%",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Term ::= PARIZQ ExpresionAritmetica PARDER 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Term ::= Valor 
            {
              Node RESULT =null;
		int vlrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vlr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vlr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionBooleana ::= ExpresionComparacion UnionExpresion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node uexpr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("conditions",exprc,uexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionBooleana ::= ExpresionComparacion 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionBooleana ::= Booleana 
            {
              Node RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bool = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bool; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionBooleana",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // UnionExpresion ::= OperadorComparacion ExpresionComparacion UnionExpresion 
            {
              Node RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node opcomp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node uexpr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = uexpr.add(opcomp,exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // UnionExpresion ::= OperadorComparacion ExpresionComparacion 
            {
              Node RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node opcomp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  opcomp.add(ec);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnionExpresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionComparacion ::= AsigValor OperadorRelacional AsigValor 
            {
              Node RESULT =null;
		int av1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int av1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node av1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int av2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int av2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(oprel.label, av1, av2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionComparacion ::= NOT ExpresionComparacion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("negation", exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OperadorRelacional ::= MAYOR 
            {
              Node RESULT =null;
		 RESULT = new Node(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OperadorRelacional ::= MENOR 
            {
              Node RESULT =null;
		 RESULT = new Node("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OperadorRelacional ::= MAYORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OperadorRelacional ::= MENORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OperadorRelacional ::= IGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OperadorRelacional ::= DIFERENTE 
            {
              Node RESULT =null;
		 RESULT = new Node("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OperadorComparacion ::= AND 
            {
              Node RESULT =null;
		 RESULT = new Node("AND"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OperadorComparacion ::= OR 
            {
              Node RESULT =null;
		 RESULT = new Node("OR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionIncDec ::= IDENTIFICADOR Incremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("update ++", new Node(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionIncDec ::= IDENTIFICADOR Decremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("update --", new Node(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

