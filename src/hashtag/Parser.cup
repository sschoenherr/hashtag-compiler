package hashtag;
import java_cup.runtime.*;
import java.util.*;

/*------------------------------------------------PARSER CODE-------------------------------------------------------*/
parser code {:

public void report_error(String message, Object info) {
  StringBuilder m = new StringBuilder("Error");
  if(info instanceof java_cup.runtime.Symbol){
       java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
       if(s.left >= 0){
        m.append(" en la linea " + (s.left+1));
         if(s.right >=0)
           m.append(", columna " + (s.right+1));
      }
    }
     m.append(" : " + message + "," + info);
     System.err.println(m);
}

public void report_fatal_error(String message, Object info){
   report_error(message, info);
   //System.exit(1);
}
:}

/*------------------------------------------------TERMINALES-------------------------------------------------------*/

terminal   SUMA, MENOS, DIV, MULT, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, NOT, DIFERENTE, IGUAL, ASIGNACION, PUNTO;
terminal   PARDER, PARIZQ, MOD, COMA, PUNTOCOMA, COMILLAS, INTERROGACION, UNACOMILLA, CORCHETEDER, CORCHETEIZQ, MAINBEGIN, ENDMAIN, DOSPUNTOS, FUNCTION;
terminal   REAL;
terminal Integer   INT, IDENTIFICADOR, NUMERO;
terminal Double    DOUBLE;
terminal Char      CHAR;
terminal String    STRING;
terminal Boolean   BOOLEAN;
terminal   AND, EQUALS, OR, FOR, IF, THEN, ELSE, WHILE, ENDIF, ENDWHILE, BEGIN, END, SWITCH, CASE, DO, TRUE, FALSE, PUBLIC, PRIVATE, CLASS, NEW, VOID, BREAK, RETURN, PRINT;

/*------------------------------------------------NO-TERMINALES----------------------------------------------------*/

non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, term;

/*------------------------------------------------PRECEDENCIA--------------------------------------------------------*/

precedence left  SUMA, MENOS;
precedence left  MULT, DIV;

/*------------------------------------------------GRAMATICA-------------------------------------------------------*/

   expr_list ::= expr_list expr_part
                 |
                 expr_part;

   expr_part ::= expr:e
                 {: System.out.println(" = " + e); :}
                 PUNTOCOMA
                 ;

   expr      ::= expr:e SUMA factor:f
                 {: RESULT = new Integer(e.intValue() + f.intValue()); :}
                 |
                 expr:e MENOS factor:f
                 {: RESULT = new Integer(e.intValue() - f.intValue()); :}
                 |
                 factor:f
                 {: RESULT = new Integer(f.intValue()); :}
                 ;

   factor    ::= factor:f MULT term:t
                 {: RESULT = new Integer(f.intValue() * t.intValue()); :}
                 |
                 factor:f DIV term:t
                 {: RESULT = new Integer(f.intValue() / t.intValue()); :}
                 |
                 term:t
                 {: RESULT = new Integer(t.intValue()); :}
                 ;

   term      ::= PARIZQ expr:e PARDER
                 {: RESULT = e; :}
                 |
                 NUMERO:n
                 {: RESULT = n; :}
                 |
                 IDENTIFICADOR:i
                 {: RESULT = i; :}
                 ;