package hashtag;
import java_cup.runtime.*;
import java.util.*;



//------------------------------------------------PARSER CODE-------------------------------------------------------
parser code {:

    public ArrayList<Node> AST = new ArrayList();

    public void report_error(String message, Object info){
      StringBuilder m = new StringBuilder("Error");
      if(info instanceof java_cup.runtime.Symbol){
           java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
           if(s.left >= 0){
            m.append(" en la linea " + (s.left+1));
             if(s.right >=0)
               m.append(", columna " + (s.right+1));
          }
          m.append(" @ symbol: " + s);
        }
         m.append(" : " + message);
         Interfaz.console.setText(Interfaz.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
       report_error(message, info);
       //System.exit(1);
    }
:}

//------------------------------------------------TERMINALES-------------------------------------------------------

terminal   SUMA,MENOS,DIV,MULT,MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,NOT,DIFERENTE,IGUAL,ASIGNACION,IDENTIFICADOR;
terminal   PARDER,PARIZQ,MOD,COMA,PUNTOCOMA,MAINBEGIN,DOSPUNTOS;
terminal   AND,OR,FOR,IF,ELSE,WHILE,BEGIN,END,SWITCH,CASE,DO,FUNCTION,BREAK,RETURN,PRINT;
terminal   INT,DOUBLE,CHAR,STRING,BOOLEAN,READSTRING,READCHAR,READINT,READDOUBLE,OTHER;
terminal Integer   NUMERO;
terminal Double    REAL;
terminal Char      CARACTER;
terminal String    CADENA;
terminal Boolean   FALSE, TRUE;


//------------------------------------------------NO-TERMINALES----------------------------------------------------
non terminal Node Main,Body,DeclaracionVariable,DeclaracionSimple,DeclaracionMultiple,Type,Asignacion,AsigValor,Var,Program,Body2,Stmts;
non terminal Node Instruccion,Llamado,Expresion,ExpresionComparacion,OperadorComparacion,OperadorRelacional,ExpresionIncDec,Incremento,Decremento;
non terminal Node Bloque,Loops,Conditional,ForLoop,WhileLoop,IfConditional,SwitchConditional,ExprFor,UnionExpresion,ExpresionSwitch,Switch;
non terminal Node ExpresionBooleana,ExpresionAritmetica,Factor,Term,ConditionGroup,T,SubContenido,Contenido;
non terminal Node Print,LlamadoMetodos,Booleana,Parametros,x,Multiple,Valor,EndFunction,Cadena,Return;

//------------------------------------------------PRECEDENCIA--------------------------------------------------------

precedence left  SUMA,MENOS;
precedence left  MULT,DIV,MOD; 
precedence left  PARIZQ;
//leer usuario , llamado metodos

//------------------------------------------------GRAMATICA-------------------------------------------------------

start with Program;
Program                         ::= BEGIN Body2:b2 Main:mn END
                                    {: 
                                        RESULT = new Node("Program", b2, mn);
                                        parser.AST.add(RESULT);
                                    :}
                                    ; /*new node ("...", body2, main)...ast.add*/
Main                            ::= MAINBEGIN Stmts:st
                                    {: RESULT = new Node("main", st); :}
                                    ;

Stmts                           ::= DO Body:bd END
                                    {: RESULT = new Node("block", bd); :}
                                    |
                                    DO Stmts:st END
                                    {: RESULT = st; :}
                                    ;

Body                            ::= Instruccion:ins PUNTOCOMA Body
                                    {: RESULT = ins; :}
                                    |
                                    Bloque:bq Body
                                    {: RESULT = bq; :}
                                    |
                                    Asignacion:asig PUNTOCOMA Body
                                    {: RESULT = asig; :}
                                    |
                                    {: RESULT = new Node(""); :}
                                    ;

/*DECLARACION VARIABLES ASIGNACION VARIABLES */

Instruccion                     ::= DeclaracionVariable
                                    |
                                    Llamado
                                    ;

DeclaracionVariable             ::= Type IDENTIFICADOR Var;

Var                             ::= DeclaracionSimple
                                    |
                                    DeclaracionMultiple
                                    ;

DeclaracionSimple               ::= ASIGNACION AsigValor:av
                                    {: RESULT = av; :}
                                    ;

DeclaracionMultiple             ::= COMA IDENTIFICADOR Var
                                    |
                                    ;

Valor                           ::= NUMERO:num
                                    {: RESULT = new Node(Integer.toString(num)); :}
                                    |
                                    IDENTIFICADOR:id
                                    {: RESULT = new Node("id"); :}
                                    |
                                    REAL:r
                                    {: RESULT = new Node(Double.toString(r)); :}
                                    ;

AsigValor                       ::= Cadena:c
                                    {: RESULT = c; :}
                                    |
                                    CARACTER
                                    |
                                    Booleana
                                   ;
Booleana                        ::= TRUE
                                    |
                                    FALSE;

Cadena                          ::= CADENA
                                    |
                                    ExpresionAritmetica:ea
                                    {: RESULT = ea; :}
                                    ;
                         
Asignacion                      ::= IDENTIFICADOR:id DeclaracionSimple:ds
                                    {: RESULT = new Node("=",new Node("id"), ds); :}
                                    |
                                    ExpresionIncDec;

Type                            ::= INT                 
                                    |
                                    DOUBLE              
                                    |
                                    CHAR
                                    |
                                    BOOLEAN
                                    |
                                    STRING ; 

/*LLAMADOS*/
Llamado                         ::= Print
                                    |
                                    LlamadoMetodos
                                    ;

LlamadoMetodos                  ::= IDENTIFICADOR Contenido ;
Contenido                       ::= PARIZQ  SubContenido PARDER;
SubContenido                    ::= IDENTIFICADOR T
                                    | ;

T                               ::= COMA IDENTIFICADOR  T
                                    | ;
   
/*PARAMETROD*/                     
Parametros                      ::= Type IDENTIFICADOR Multiple
                                    |
                                    Type IDENTIFICADOR
                                    | ;

Multiple                        ::= COMA Parametros;
Print                           ::= PRINT PARIZQ x PARDER  ;
x                               ::= AsigValor
                                    |
                                    LlamadoMetodos
                                    |  ;
/*FUNCTION */
Body2                           ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER DO Body EndFunction END Body2
                                    |
                                    {: RESULT = new Node(""); :}
                                    ;

EndFunction                     ::= RETURN Return PUNTOCOMA
                                    | ;

Return                          ::= LlamadoMetodos
                                    |
                                    AsigValor
                                    | ;

/*BLOQUE*/
Bloque                          ::= Loops
                                    |
                                    Conditional:cond
                                    {: RESULT = cond; :}
                                    ;

Loops                           ::= ForLoop
                                    |
                                    WhileLoop ;

Conditional                     ::= IfConditional:ic
                                    {: RESULT = ic; :}
                                    |
                                    SwitchConditional ;

ForLoop                         ::= FOR PARIZQ ExprFor PARDER Stmts;

ExprFor                         ::= DeclaracionVariable PUNTOCOMA Expresion PUNTOCOMA ExpresionIncDec ;

WhileLoop                       ::= WHILE PARIZQ ExpresionBooleana PARDER Stmts;

IfConditional                   ::= IF ConditionGroup:cg Stmts:st
                                    {: RESULT = new Node("IF",cg, st); :}
                                    |
                                    IF ConditionGroup Stmts ELSE Stmts; /*hay que subir este else arriba*/

ConditionGroup                  ::= PARIZQ ExpresionBooleana:eb PARDER
                                    {: RESULT = eb; :};

SwitchConditional               ::= SWITCH PARIZQ IDENTIFICADOR PARDER DO ExpresionSwitch END;

ExpresionSwitch                 ::= CASE Switch DOSPUNTOS DO Body BREAK PUNTOCOMA END ExpresionSwitch
                                    |
                                    OTHER DOSPUNTOS DO Body BREAK PUNTOCOMA END;

Switch                          ::= NUMERO
                                    |
                                    CARACTER;

/*EXPRESIONES*/
Expresion                       ::= ExpresionBooleana
                                    |
                                    ExpresionAritmetica;

ExpresionAritmetica             ::= ExpresionAritmetica:ea SUMA Factor:fct
                                    {: RESULT = new Node("+",ea,fct); :}
                                    |
                                    ExpresionAritmetica:ea MENOS Factor:fct
                                    {: RESULT = new Node("-",ea,fct); :}
                                    |
                                    Factor:fct
                                    {: RESULT = fct; :}
                                    ;

Factor                          ::= Factor:fct MULT Term:trm
                                    {: RESULT = new Node("*",fct,trm); :}
                                    |
                                    Factor:fct DIV Term:trm
                                    {: RESULT = new Node("/",fct,trm); :}
                                    |
                                    Factor:fct MOD Term:trm
                                    {: RESULT = new Node("%",fct,trm); :}
                                    |
                                    Term:trm
                                    {: RESULT = trm; :}
                                    ;

Term                            ::= PARIZQ ExpresionAritmetica:ea PARDER
                                    {: RESULT = ea; :}
                                    |
                                    Valor:vlr
                                    {: RESULT = vlr; :}
                                    ;

ExpresionBooleana               ::= ExpresionComparacion UnionExpresion
                                    |
                                    ExpresionComparacion:ec
                                    {: RESULT = ec; :}
                                    |
                                    Booleana
                                    ;

UnionExpresion                  ::= OperadorComparacion ExpresionComparacion UnionExpresion
                                    |
                                    OperadorComparacion ExpresionComparacion
                                    ;

ExpresionComparacion            ::= AsigValor:av1 OperadorRelacional:oprel AsigValor:av2
                                    {: RESULT = new Node(oprel.label, av1, av2); :}
                                    |
                                    NOT ExpresionComparacion;

OperadorRelacional              ::= MAYOR
                                    {: RESULT = new Node(">"); :}
                                    |
                                    MENOR
                                    {: RESULT = new Node("<"); :}
                                    |
                                    MAYORIGUAL
                                    {: RESULT = new Node(">="); :}
                                    |
                                    MENORIGUAL
                                    {: RESULT = new Node("<="); :}
                                    |
                                    IGUAL
                                    {: RESULT = new Node("="); :}
                                    |
                                    DIFERENTE
                                    {: RESULT = new Node("!="); :}
                                    ;
OperadorComparacion             ::= AND
                                    |
                                    OR
                                    ;
ExpresionIncDec                 ::= IDENTIFICADOR Incremento
                                    |
                                    IDENTIFICADOR Decremento;

Incremento                      ::= SUMA SUMA;
Decremento                      ::= MENOS MENOS;