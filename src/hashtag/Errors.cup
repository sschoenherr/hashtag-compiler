package hashtag;
import java_cup.runtime.*;
import java.util.*;



//------------------------------------------------PARSER CODE-------------------------------------------------------
parser code {:
  public static Lexer s;
  public static int errors = 0;

  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try {
        System.out.println("Parsing ["+argv[i]+"]");
        s = new Scanner(new FileReader(argv[i]));
        Parser p = new Parser(s);
        p.parse();
        System.out.println("Number of errors = " + errors + ".");
      }
      catch (Exception e) {
        e.printStackTrace(System.out);
        System.exit(1);
      }
    }
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
:}

//------------------------------------------------TERMINALES-------------------------------------------------------

terminal   SUMA,MENOS,DIV,MULT,MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,NOT,DIFERENTE,IGUAL,ASIGNACION,IDENTIFICADOR;
terminal   PARDER,PARIZQ,MOD,COMA,PUNTOCOMA,MAINBEGIN,DOSPUNTOS;
terminal   AND,OR,FOR,IF,ELSE,WHILE,BEGIN,END,SWITCH,CASE,DO,TRUE,FALSE,FUNCTION,BREAK,RETURN,PRINT;
terminal   NUMERO,REAL,CADENA,CARACTER,READSTRING,READCHAR,READINT,READDOUBLE,OTHER,VOID;
terminal Integer   INT;
terminal Double    DOUBLE;
terminal Char      CHAR;
terminal String    STRING;
terminal Boolean   BOOLEAN;


//------------------------------------------------NO-TERMINALES----------------------------------------------------
non terminal Main,BodyList,BodyPart,Type,Asignacion,AsigValor,Program,FunctionList,FunctionPart,Stmts;
non terminal Instruccion,Llamado,ExpresionComparacion,OperadorComparacion,OperadorRelacional,ExpresionIncDec,Incremento,Decremento;
non terminal Bloque,Loops,Conditional,ForLoop,WhileLoop,IfConditional,SwitchConditional,ExprFor,UnionExpresion,Switch,ExprSwitchList,ExprSwitchPart;
non terminal ExpresionBooleana,ExpresionAritmetica,Factor,Term,ConditionGroup,Contenido;
non terminal Print,LlamadoMetodos,Booleana,Parametros,PrintParam,Multiple,Valor,EndFunction,Cadena,Return;
non terminal VarDeclare, VarInit, VarDeclarationList, VarDeclarationPart,Functions;

//------------------------------------------------PRECEDENCIA--------------------------------------------------------

precedence left  SUMA,MENOS;
precedence left  MULT,DIV,MOD; 
precedence left  PARIZQ;
//leer usuario , llamado metodos

//------------------------------------------------GRAMATICA-------------------------------------------------------

start with Program;
Program                         ::= BEGIN Functions Main END
                                    |
                                    BEGIN Main END
                                    ;

Functions                       ::= FunctionList;

Main                            ::= MAINBEGIN Stmts;

Stmts                           ::= DO BodyList END
                                    |
                                    DO Stmts END
                                    |
                                    DO END
                                    |
                                    DO error {: parser.report_error("block declaration, possible unmatched DO...END","WRONG"); :} END
                                    ;

BodyList                        ::= BodyPart BodyList
                                    |
                                    BodyPart;

BodyPart                        ::= Instruccion PUNTOCOMA
                                    |
                                    Bloque
                                    |
                                    Asignacion PUNTOCOMA
                                    |
                                    error {: parser.report_error("statement or variable declaration, assignment or initialization","WRONG"); :} BodyPart;

/*DECLARACION VARIABLES ASIGNACION VARIABLES */
Instruccion                     ::= VarDeclare
                                    |
                                    VarInit
                                    |
                                    Llamado
                                    |
                                    error {: parser.report_error("variable initialization, declaration or function call","WRONG"); :} PUNTOCOMA
                                    ;

VarDeclare                      ::= Type VarDeclarationList;

VarDeclarationList              ::= VarDeclarationPart COMA VarDeclarationList
                                    |
                                    VarDeclarationPart;

VarDeclarationPart              ::= IDENTIFICADOR;

VarInit                         ::= VarDeclare ASIGNACION AsigValor;

Valor                           ::= NUMERO 
                                    |
                                    IDENTIFICADOR
                                    |
                                    REAL;

AsigValor                       ::= Cadena
                                    |
                                    CARACTER
                                    |
                                    Booleana
                                   ;
Booleana                        ::= TRUE
                                    |
                                    FALSE;

Cadena                          ::= CADENA
                                    |
                                    ExpresionAritmetica;
                         
Asignacion                      ::= IDENTIFICADOR ASIGNACION AsigValor
                                    |
                                    ExpresionIncDec;

Type                            ::= INT                 
                                    |
                                    DOUBLE              
                                    |
                                    CHAR
                                    |
                                    BOOLEAN
                                    |
                                    STRING ; 

/*LLAMADOS*/
Llamado                         ::= Print
                                    |
                                    LlamadoMetodos
                                    ;

LlamadoMetodos                  ::= IDENTIFICADOR PARIZQ Contenido PARDER
                                    |
                                    IDENTIFICADOR PARIZQ PARDER;

Contenido                       ::= AsigValor COMA Contenido
                                    |
                                    AsigValor;
/*
Contenido                       ::= SubContenido;

SubContenido                    ::= AsigValor T
                                    | ;

T                               ::= COMA AsigValor  T
                                    | ;
*/   
/*PARAMETROD*/                     
Parametros                      ::= Type IDENTIFICADOR Multiple
                                    |
                                    Type IDENTIFICADOR
                                    | ;

Multiple                        ::= COMA Parametros;

Print                           ::= PRINT PARIZQ PrintParam PARDER;

PrintParam                      ::= IDENTIFICADOR
                                    |
                                    CADENA
                                    |
                                    LlamadoMetodos
                                    |  ;

/*FUNCTION */
FunctionList                    ::= FunctionPart FunctionList
                                    |
                                    FunctionPart;

FunctionPart                    ::= FUNCTION VOID IDENTIFICADOR PARIZQ Parametros PARDER Stmts
                                    |
                                    FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER EndFunction;

EndFunction                     ::= DO BodyList RETURN Return PUNTOCOMA END
                                    |
                                    DO RETURN Return PUNTOCOMA END;

Return                          ::= LlamadoMetodos
                                    |
                                    AsigValor;

/*BLOQUE*/
Bloque                          ::= Loops
                                    |
                                    Conditional;

Loops                           ::= ForLoop
                                    |
                                    WhileLoop ;

Conditional                     ::= IfConditional
                                    |
                                    SwitchConditional ;

ForLoop                         ::= FOR PARIZQ ExprFor PARDER Stmts
                                    |
                                    FOR error {: parser.report_error("FOR statement declaration","WRONG"); :} Stmts;

ExprFor                         ::= INT Asignacion PUNTOCOMA ExpresionBooleana PUNTOCOMA ExpresionIncDec ;

WhileLoop                       ::= WHILE PARIZQ ExpresionBooleana PARDER Stmts;

IfConditional                   ::= IF ConditionGroup Stmts
                                    |
                                    IF ConditionGroup Stmts ELSE Stmts
                                    |
                                    IF error {: parser.report_error("IF statement declaration", "WRONG"); :} Stmts
                                    ;

ConditionGroup                  ::= PARIZQ ExpresionBooleana PARDER
                                    |
                                    PARIZQ PARDER error {: parser.report_error("IF statement, no boolean expresion found","WRONG"); :} Stmts;

SwitchConditional               ::= SWITCH PARIZQ IDENTIFICADOR PARDER DO ExprSwitchList END
                                    |
                                    SWITCH PARIZQ Switch PARDER DO ExprSwitchList END
                                    ;

ExprSwitchList                  ::= ExprSwitchPart ExprSwitchList
                                    |
                                    ExprSwitchPart;

ExprSwitchPart                  ::= CASE Switch DOSPUNTOS Stmts BREAK PUNTOCOMA
                                    |
                                    OTHER DOSPUNTOS Stmts BREAK PUNTOCOMA;

Switch                          ::= NUMERO
                                    |
                                    CARACTER;
/*
ExpresionSwitch                 ::= CASE Switch DOSPUNTOS Stmts BREAK PUNTOCOMA ExpresionSwitch
                                    |
                                    OTHER DOSPUNTOS Stmts BREAK PUNTOCOMA;

*/

/*EXPRESIONES*/

ExpresionAritmetica             ::= ExpresionAritmetica SUMA Factor
                                    |
                                    ExpresionAritmetica MENOS Factor
                                    |
                                    Factor
                                    ;

Factor                          ::= Factor MULT Term
                                    |
                                    Factor DIV Term
                                    |
                                    Factor MOD Term
                                    |
                                    Term
                                    ;

Term                            ::= PARIZQ ExpresionAritmetica Term
                                    |
                                    Valor
                                    ;

ExpresionBooleana               ::= ExpresionComparacion UnionExpresion
                                    |
                                    ExpresionComparacion
                                    |
                                    Booleana
                                    ;

UnionExpresion                  ::= OperadorComparacion ExpresionComparacion UnionExpresion
                                    |
                                    OperadorComparacion ExpresionComparacion
                                    ;

ExpresionComparacion            ::= AsigValor OperadorRelacional AsigValor
                                    |
                                    NOT ExpresionComparacion;

OperadorRelacional              ::= MAYOR 
                                    |
                                    MENOR
                                    |
                                    MAYORIGUAL
                                    |
                                    MENORIGUAL
                                    |
                                    IGUAL
                                    |
                                    DIFERENTE
                                    ;
OperadorComparacion             ::= AND
                                    |
                                    OR
                                    ;
ExpresionIncDec                 ::= IDENTIFICADOR Incremento
                                    |
                                    IDENTIFICADOR Decremento;

Incremento                      ::= SUMA SUMA;
Decremento                      ::= MENOS MENOS;