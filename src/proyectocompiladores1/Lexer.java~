/* The following code was generated by JFlex 1.6.0 */

package proyectocompiladores1;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/ProyectoCompiladores1/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\12\1\13\1\13\1\12\22\0\1\4\1\23\1\10"+
    "\1\11\1\0\1\26\1\0\1\32\1\24\1\25\1\17\1\14\1\27"+
    "\1\15\1\5\1\16\12\1\1\0\1\30\1\21\1\22\1\20\1\31"+
    "\1\0\32\2\1\33\1\0\1\34\1\0\1\3\1\0\1\50\1\43"+
    "\1\46\1\40\1\45\1\55\1\53\1\47\1\35\1\2\1\61\1\44"+
    "\1\57\1\36\1\41\1\62\1\54\1\51\1\52\1\37\1\42\1\60"+
    "\1\56\3\2\1\6\1\0\1\7\7\0\1\13\u1fa2\0\1\13\1\13"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\17\4\1\1\1\32\1\33"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\4\1\41"+
    "\2\4\1\42\1\43\23\4\1\44\1\45\6\4\1\46"+
    "\5\4\1\47\3\4\1\50\5\4\1\51\1\52\6\4"+
    "\1\53\2\4\1\54\1\55\6\4\1\56\3\4\1\57"+
    "\1\60\1\61\2\4\1\62\3\4\1\63\1\64\1\4"+
    "\1\65\1\66\2\4\1\67\1\70\1\71\1\72\1\4"+
    "\1\73\2\4\1\74\1\4\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\231\0\231"+
    "\0\231\0\231\0\u0132\0\231\0\231\0\231\0\231\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\231\0\231\0\231\0\u0561"+
    "\0\231\0\231\0\231\0\231\0\u0594\0\377\0\u05c7\0\u05fa"+
    "\0\u062d\0\377\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0561\0\377\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\377\0\u0c8d\0\u0cc0\0\u0cf3\0\377"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\377\0\377\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\377\0\u0f57\0\u0f8a"+
    "\0\377\0\377\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\377\0\u10ef\0\u1122\0\u1155\0\377\0\377\0\377\0\u1188"+
    "\0\u11bb\0\377\0\u11ee\0\u1221\0\u1254\0\377\0\377\0\u1287"+
    "\0\377\0\377\0\u12ba\0\u12ed\0\377\0\377\0\377\0\377"+
    "\0\u1320\0\377\0\u1353\0\u1386\0\377\0\u13b9\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\4"+
    "\1\12\1\13\1\7\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\6\1\36"+
    "\1\37\1\40\1\6\1\41\1\6\1\42\1\43\1\6"+
    "\1\44\1\45\1\46\2\6\1\47\1\50\1\51\1\52"+
    "\1\6\1\53\7\54\1\55\53\54\10\56\1\57\1\56"+
    "\2\0\47\56\64\0\1\5\3\0\1\60\56\0\3\6"+
    "\31\0\26\6\12\7\2\0\47\7\22\0\1\61\62\0"+
    "\1\62\62\0\1\63\62\0\1\64\41\0\3\6\31\0"+
    "\1\6\1\65\16\6\1\66\5\6\1\0\3\6\31\0"+
    "\12\6\1\67\1\6\1\70\11\6\1\0\3\6\31\0"+
    "\4\6\1\71\21\6\1\0\3\6\31\0\14\6\1\72"+
    "\11\6\1\0\3\6\31\0\4\6\1\73\3\6\1\74"+
    "\3\6\1\75\11\6\1\0\3\6\31\0\1\6\1\76"+
    "\5\6\1\77\7\6\1\100\6\6\1\0\3\6\31\0"+
    "\7\6\1\101\2\6\1\102\1\103\12\6\1\0\3\6"+
    "\31\0\1\6\1\104\24\6\1\0\3\6\31\0\10\6"+
    "\1\105\15\6\1\0\3\6\31\0\2\6\1\106\16\6"+
    "\1\107\4\6\1\0\3\6\31\0\4\6\1\110\6\6"+
    "\1\111\12\6\1\0\3\6\31\0\12\6\1\112\13\6"+
    "\1\0\3\6\31\0\13\6\1\113\12\6\1\0\3\6"+
    "\31\0\4\6\1\114\21\6\1\0\3\6\31\0\14\6"+
    "\1\115\11\6\7\54\1\0\53\54\1\0\1\116\62\0"+
    "\3\6\31\0\2\6\1\117\23\6\1\0\3\6\31\0"+
    "\10\6\1\120\15\6\1\0\3\6\31\0\5\6\1\121"+
    "\20\6\1\0\3\6\31\0\5\6\1\122\20\6\1\0"+
    "\3\6\31\0\4\6\1\123\21\6\1\0\3\6\31\0"+
    "\16\6\1\124\7\6\1\0\3\6\31\0\10\6\1\125"+
    "\15\6\1\0\3\6\31\0\3\6\1\126\22\6\1\0"+
    "\3\6\31\0\15\6\1\127\10\6\1\0\3\6\31\0"+
    "\5\6\1\130\20\6\1\0\3\6\31\0\13\6\1\131"+
    "\12\6\1\0\3\6\31\0\13\6\1\132\12\6\1\0"+
    "\3\6\31\0\15\6\1\133\10\6\1\0\3\6\31\0"+
    "\3\6\1\134\22\6\1\0\3\6\31\0\2\6\1\135"+
    "\23\6\1\0\3\6\31\0\14\6\1\136\11\6\1\0"+
    "\3\6\31\0\1\137\25\6\1\0\3\6\31\0\14\6"+
    "\1\140\11\6\1\0\3\6\31\0\7\6\1\141\16\6"+
    "\1\0\3\6\31\0\1\142\25\6\1\0\3\6\31\0"+
    "\1\143\25\6\1\0\3\6\31\0\1\144\25\6\1\0"+
    "\3\6\31\0\1\145\25\6\1\0\3\6\31\0\1\6"+
    "\1\146\24\6\1\0\3\6\31\0\10\6\1\147\15\6"+
    "\1\0\3\6\31\0\6\6\1\150\17\6\1\0\3\6"+
    "\31\0\7\6\1\151\16\6\1\0\3\6\31\0\1\152"+
    "\25\6\1\0\3\6\31\0\13\6\1\153\12\6\1\0"+
    "\3\6\31\0\1\154\20\6\1\155\4\6\1\0\3\6"+
    "\31\0\10\6\1\156\15\6\1\0\3\6\31\0\13\6"+
    "\1\157\12\6\1\0\3\6\31\0\15\6\1\160\10\6"+
    "\1\0\3\6\31\0\14\6\1\161\11\6\1\0\3\6"+
    "\31\0\10\6\1\162\15\6\1\0\3\6\31\0\5\6"+
    "\1\163\20\6\1\0\3\6\31\0\1\164\25\6\1\0"+
    "\3\6\31\0\2\6\1\165\23\6\1\0\3\6\31\0"+
    "\15\6\1\166\10\6\1\0\3\6\31\0\7\6\1\167"+
    "\16\6\1\0\3\6\31\0\1\6\1\170\24\6\1\0"+
    "\3\6\31\0\3\6\1\171\22\6\1\0\3\6\31\0"+
    "\1\6\1\172\24\6\1\0\3\6\31\0\7\6\1\173"+
    "\16\6\1\0\3\6\31\0\10\6\1\174\15\6\1\0"+
    "\3\6\31\0\1\6\1\175\24\6\1\0\3\6\31\0"+
    "\24\6\1\176\1\6\1\0\3\6\31\0\20\6\1\177"+
    "\5\6\1\0\3\6\31\0\12\6\1\200\13\6\1\0"+
    "\3\6\31\0\7\6\1\201\16\6\1\0\3\6\31\0"+
    "\15\6\1\202\10\6\1\0\3\6\31\0\14\6\1\203"+
    "\11\6\1\0\3\6\31\0\1\6\1\204\24\6\1\0"+
    "\3\6\31\0\11\6\1\205\14\6\1\0\3\6\31\0"+
    "\10\6\1\206\15\6\1\0\3\6\31\0\10\6\1\207"+
    "\15\6\1\0\3\6\31\0\6\6\1\210\17\6\1\0"+
    "\3\6\31\0\2\6\1\211\23\6\1\0\3\6\31\0"+
    "\10\6\1\212\15\6\1\0\3\6\31\0\13\6\1\213"+
    "\12\6\1\0\3\6\31\0\1\214\25\6\1\0\3\6"+
    "\31\0\15\6\1\215\10\6\1\0\3\6\31\0\1\6"+
    "\1\216\24\6\1\0\3\6\31\0\16\6\1\217\7\6"+
    "\1\0\3\6\31\0\12\6\1\220\13\6\1\0\3\6"+
    "\31\0\10\6\1\221\15\6\1\0\3\6\31\0\1\6"+
    "\1\222\24\6\1\0\3\6\31\0\7\6\1\223\16\6"+
    "\1\0\3\6\31\0\16\6\1\224\7\6\1\0\3\6"+
    "\31\0\10\6\1\225\15\6\1\0\3\6\31\0\1\226"+
    "\25\6\1\0\3\6\31\0\1\6\1\227\24\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\2\1\4\11\1\1\4\11"+
    "\4\1\11\11\20\1\3\11\1\0\4\11\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*para los simbolos generales*/
    private Symbol symbol(int type){
      return new Symbol(type,yyline,yycolumn);
    }

    /*para el tipo de token con su valor*/
    private Symbol symbol (int type, Object value){
      return new Symbol(type,yyline,yycolumn,value);
    }

    public String Tokens="";
    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /*IGNORE*/
          }
        case 62: break;
        case 2: 
          { throw new Error("Error Lexico, caracter <" + yytext() + "> ilegal, en la linea: " + yyline + "Columna: " + yycolumn);
          }
        case 63: break;
        case 3: 
          { return symbol(sym.NUMERO, yytext());
          }
        case 64: break;
        case 4: 
          { return symbol(sym.IDENTIFICADOR, yytext());
          }
        case 65: break;
        case 5: 
          { /*Ignore*/
          }
        case 66: break;
        case 6: 
          { return symbol(sym.PUNTO);
          }
        case 67: break;
        case 7: 
          { yybegin(COMMENT);
          }
        case 68: break;
        case 8: 
          { string.setLength(0);yybegin(SSTRING);
          }
        case 69: break;
        case 9: 
          { return symbol(sym.SUMA);
          }
        case 70: break;
        case 10: 
          { return symbol(sym.MENOS);
          }
        case 71: break;
        case 11: 
          { return symbol(sym.DIV);
          }
        case 72: break;
        case 12: 
          { return symbol(sym.MULT);
          }
        case 73: break;
        case 13: 
          { return symbol(sym.MAYOR);
          }
        case 74: break;
        case 14: 
          { return symbol(sym.MENOR);
          }
        case 75: break;
        case 15: 
          { return symbol(sym.ASIGNACION);
          }
        case 76: break;
        case 16: 
          { return symbol(sym.NOT);
          }
        case 77: break;
        case 17: 
          { return symbol(sym.PARDER);
          }
        case 78: break;
        case 18: 
          { return symbol(sym.PARIZQ);
          }
        case 79: break;
        case 19: 
          { return symbol(sym.MOD);
          }
        case 80: break;
        case 20: 
          { return symbol(sym.COMA);
          }
        case 81: break;
        case 21: 
          { return symbol(sym.PUNTOCOMA);
          }
        case 82: break;
        case 22: 
          { return symbol(sym.INTERROGACION);
          }
        case 83: break;
        case 23: 
          { return symbol(sym.UNACOMILLA);
          }
        case 84: break;
        case 24: 
          { return symbol(sym.CORCHETEDER);
          }
        case 85: break;
        case 25: 
          { return symbol(sym.CORCHETEIZQ);
          }
        case 86: break;
        case 26: 
          { yybegin (YYINITIAL);
          }
        case 87: break;
        case 27: 
          { string.append(yytext());
          }
        case 88: break;
        case 28: 
          { yybegin (YYINITIAL);
                        writer.write("Token encontrado: [" + string.toString() + "] es: COMENTARIO"+"\n");
          }
        case 89: break;
        case 29: 
          { return symbol(sym.MAYORIGUAL);
          }
        case 90: break;
        case 30: 
          { return symbol(sym.MENORIGUAL);
          }
        case 91: break;
        case 31: 
          { return symbol(sym.IGUAL);
          }
        case 92: break;
        case 32: 
          { return symbol(sym.DIFERENTE);
          }
        case 93: break;
        case 33: 
          { return symbol(sym.IF);
          }
        case 94: break;
        case 34: 
          { return symbol(sym.DO);
          }
        case 95: break;
        case 35: 
          { return symbol(sym.OR);
          }
        case 96: break;
        case 36: 
          { return symbol(sym.REAL, yytext());
          }
        case 97: break;
        case 37: 
          { return symbol(sym.INT, yytext());
          }
        case 98: break;
        case 38: 
          { return symbol(sym.END);
          }
        case 99: break;
        case 39: 
          { return symbol(sym.AND);
          }
        case 100: break;
        case 40: 
          { return symbol(sym.FOR);
          }
        case 101: break;
        case 41: 
          { return symbol(sym.THEN);
          }
        case 102: break;
        case 42: 
          { return symbol(sym.TRUE);
          }
        case 103: break;
        case 43: 
          { return symbol(sym.ELSE);
          }
        case 104: break;
        case 44: 
          { return symbol(sym.CHAR);
          }
        case 105: break;
        case 45: 
          { return symbol(sym.CASE);
          }
        case 106: break;
        case 46: 
          { return symbol(sym.VOID);
          }
        case 107: break;
        case 47: 
          { return symbol(sym.BEGIN);
          }
        case 108: break;
        case 48: 
          { return symbol(sym.BREAK);
          }
        case 109: break;
        case 49: 
          { return symbol(sym.ENDIF);
          }
        case 110: break;
        case 50: 
          { return symbol(sym.CLASS);
          }
        case 111: break;
        case 51: 
          { return symbol(sym.FALSE);
          }
        case 112: break;
        case 52: 
          { return symbol(sym.WHILE);
          }
        case 113: break;
        case 53: 
          { return symbol(sym.PRINT);
          }
        case 114: break;
        case 54: 
          { return symbol(sym.DOUBLE, yytext());
          }
        case 115: break;
        case 55: 
          { return symbol(sym.EQUALS);
          }
        case 116: break;
        case 56: 
          { return symbol(sym.RETURN);
          }
        case 117: break;
        case 57: 
          { return symbol(sym.STRING);
          }
        case 118: break;
        case 58: 
          { return symbol(sym.SWITCH);
          }
        case 119: break;
        case 59: 
          { return symbol(sym.BOOLEAN);
          }
        case 120: break;
        case 60: 
          { return symbol(sym.ENDWHILE);
          }
        case 121: break;
        case 61: 
          { return symbol(sym.MAINBEGIN);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
