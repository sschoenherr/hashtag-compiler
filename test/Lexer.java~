/* The following code was generated by JFlex 1.6.0 */

import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Wilmer Carranza/Documents/GitHub/Proyecto-compi/test/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\44\1\45\1\45\1\45\22\0\1\43\1\35\1\54\2\0"+
    "\1\36\1\0\1\56\1\50\1\51\1\33\1\31\1\52\1\32\1\37"+
    "\1\34\12\40\1\0\1\53\1\26\1\27\1\25\1\55\1\0\32\41"+
    "\4\0\1\42\1\0\1\1\1\16\1\20\1\3\1\12\1\6\1\17"+
    "\1\11\1\7\1\41\1\24\1\13\1\41\1\2\1\4\1\22\1\30"+
    "\1\5\1\14\1\10\1\21\1\23\1\15\3\41\1\46\1\0\1\47"+
    "\7\0\1\45\u1fa2\0\1\45\1\45\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\20\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\1\1\30\1\31\2\3\1\32\1\33\5\3\1\34"+
    "\21\3\1\35\1\36\1\37\1\0\1\40\1\41\2\3"+
    "\1\42\1\3\1\43\2\3\1\44\16\3\1\45\3\3"+
    "\1\46\1\47\2\3\1\50\4\3\1\51\2\3\1\52"+
    "\1\53\4\3\1\54\1\3\1\55\1\56\1\57\4\3"+
    "\1\60\1\61\1\62\1\63\1\64\2\3\1\65\1\3"+
    "\1\66\1\67\1\70\1\3\1\71\1\3\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\136\0\136\0\136"+
    "\0\136\0\136\0\136\0\136\0\136\0\u03db\0\136\0\136"+
    "\0\136\0\136\0\136\0\136\0\136\0\136\0\136\0\u040a"+
    "\0\136\0\136\0\u0439\0\u0468\0\u0205\0\u0205\0\u0497\0\u04c6"+
    "\0\u04f5\0\u0524\0\u0553\0\u0205\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\136\0\136\0\136"+
    "\0\u08a1\0\u0205\0\u0205\0\u08d0\0\u08ff\0\u0205\0\u092e\0\u0205"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u08a1\0\u0c7c\0\u0cab\0\u0cda\0\u0205\0\u0205\0\u0d09"+
    "\0\u0d38\0\u0205\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0205\0\u0e23"+
    "\0\u0e52\0\u0205\0\u0205\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0205"+
    "\0\u0f3d\0\u0205\0\u0205\0\u0205\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u0205\0\u0205\0\u0205\0\u0205\0\u0205\0\u1028\0\u1057\0\u0205"+
    "\0\u1086\0\u0205\0\u0205\0\u0205\0\u10b5\0\u0205\0\u10e4\0\u0205"+
    "\0\u0205";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\14\1\16\1\17\1\20\1\14"+
    "\1\21\1\14\1\22\1\23\1\14\1\24\1\25\1\26"+
    "\1\14\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\14\1\3\1\37\2\3\1\40\1\3\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\44\50\1\51"+
    "\2\50\1\52\7\50\60\0\1\14\1\53\22\14\3\0"+
    "\1\14\7\0\3\14\15\0\11\14\1\54\12\14\3\0"+
    "\1\14\7\0\3\14\15\0\3\14\1\55\20\14\3\0"+
    "\1\14\7\0\3\14\15\0\4\14\1\56\17\14\3\0"+
    "\1\14\7\0\3\14\15\0\11\14\1\57\12\14\3\0"+
    "\1\14\7\0\3\14\15\0\1\60\2\14\1\61\6\14"+
    "\1\62\11\14\3\0\1\14\7\0\3\14\15\0\1\14"+
    "\1\63\3\14\1\64\16\14\3\0\1\14\7\0\3\14"+
    "\15\0\4\14\1\65\3\14\1\66\13\14\3\0\1\14"+
    "\7\0\3\14\15\0\24\14\3\0\1\14\7\0\3\14"+
    "\15\0\1\14\1\67\10\14\1\70\11\14\3\0\1\71"+
    "\7\0\3\14\15\0\7\14\1\72\4\14\1\73\7\14"+
    "\3\0\1\14\7\0\3\14\15\0\10\14\1\74\13\14"+
    "\3\0\1\14\7\0\3\14\15\0\3\14\1\75\1\76"+
    "\4\14\1\77\12\14\3\0\1\14\7\0\3\14\15\0"+
    "\1\100\7\14\1\101\1\14\1\102\11\14\3\0\1\14"+
    "\7\0\3\14\15\0\4\14\1\103\13\14\1\104\3\14"+
    "\3\0\1\14\7\0\3\14\15\0\3\14\1\105\20\14"+
    "\3\0\1\14\7\0\3\14\43\0\1\106\54\0\1\107"+
    "\1\0\1\110\27\0\40\111\1\36\3\111\2\0\11\111"+
    "\44\50\1\0\2\50\1\0\7\50\1\0\2\14\1\112"+
    "\21\14\3\0\1\14\7\0\3\14\15\0\14\14\1\113"+
    "\7\14\3\0\1\14\7\0\3\14\15\0\7\14\1\114"+
    "\14\14\3\0\1\14\7\0\3\14\15\0\12\14\1\115"+
    "\11\14\3\0\1\14\7\0\3\14\15\0\4\14\1\116"+
    "\17\14\3\0\1\14\7\0\3\14\15\0\3\14\1\117"+
    "\20\14\3\0\1\14\7\0\3\14\15\0\7\14\1\120"+
    "\14\14\3\0\1\14\7\0\3\14\15\0\20\14\1\121"+
    "\3\14\3\0\1\14\7\0\3\14\15\0\11\14\1\122"+
    "\12\14\3\0\1\14\7\0\3\14\15\0\2\14\1\123"+
    "\21\14\3\0\1\14\7\0\3\14\15\0\13\14\1\124"+
    "\10\14\3\0\1\14\7\0\3\14\15\0\20\14\1\125"+
    "\3\14\3\0\1\14\7\0\3\14\15\0\4\14\1\126"+
    "\17\14\3\0\1\14\7\0\3\14\15\0\6\14\1\127"+
    "\15\14\3\0\1\14\7\0\3\14\15\0\6\14\1\130"+
    "\15\14\3\0\1\14\7\0\3\14\15\0\3\14\1\131"+
    "\20\14\3\0\1\14\7\0\3\14\15\0\11\14\1\132"+
    "\12\14\3\0\1\14\7\0\3\14\15\0\16\14\1\133"+
    "\5\14\3\0\1\14\7\0\3\14\15\0\13\14\1\134"+
    "\10\14\3\0\1\14\7\0\3\14\15\0\1\135\23\14"+
    "\3\0\1\14\7\0\3\14\15\0\1\136\23\14\3\0"+
    "\1\14\7\0\3\14\15\0\6\14\1\137\15\14\3\0"+
    "\1\14\7\0\3\14\15\0\15\14\1\140\6\14\3\0"+
    "\1\14\7\0\3\14\15\0\6\14\1\141\15\14\3\0"+
    "\1\14\7\0\3\14\54\0\1\142\17\0\20\14\1\143"+
    "\3\14\3\0\1\14\7\0\3\14\15\0\13\14\1\144"+
    "\10\14\3\0\1\14\7\0\3\14\15\0\1\145\23\14"+
    "\3\0\1\14\7\0\3\14\15\0\11\14\1\146\12\14"+
    "\3\0\1\14\7\0\3\14\15\0\1\14\1\147\22\14"+
    "\3\0\1\14\7\0\3\14\15\0\6\14\1\150\5\14"+
    "\1\151\7\14\3\0\1\14\7\0\3\14\15\0\11\14"+
    "\1\152\12\14\3\0\1\14\7\0\3\14\15\0\1\153"+
    "\23\14\3\0\1\14\7\0\3\14\15\0\6\14\1\154"+
    "\15\14\3\0\1\14\7\0\3\14\15\0\7\14\1\155"+
    "\14\14\3\0\1\14\7\0\3\14\15\0\12\14\1\156"+
    "\11\14\3\0\1\14\7\0\3\14\15\0\12\14\1\157"+
    "\11\14\3\0\1\14\7\0\3\14\15\0\1\160\23\14"+
    "\3\0\1\14\7\0\3\14\15\0\6\14\1\161\15\14"+
    "\3\0\1\14\7\0\3\14\15\0\11\14\1\162\12\14"+
    "\3\0\1\14\7\0\3\14\15\0\4\14\1\163\17\14"+
    "\3\0\1\14\7\0\3\14\15\0\13\14\1\164\10\14"+
    "\3\0\1\14\7\0\3\14\15\0\1\14\1\165\20\14"+
    "\1\166\1\14\3\0\1\14\7\0\3\14\15\0\12\14"+
    "\1\167\11\14\3\0\1\14\7\0\3\14\15\0\2\14"+
    "\1\170\21\14\3\0\1\14\7\0\3\14\15\0\4\14"+
    "\1\171\17\14\3\0\1\14\7\0\3\14\15\0\11\14"+
    "\1\172\12\14\3\0\1\14\7\0\3\14\15\0\7\14"+
    "\1\173\14\14\3\0\1\14\7\0\3\14\15\0\5\14"+
    "\1\174\16\14\3\0\1\14\7\0\3\14\15\0\10\14"+
    "\1\175\13\14\3\0\1\14\7\0\3\14\15\0\12\14"+
    "\1\176\11\14\3\0\1\14\7\0\3\14\15\0\1\14"+
    "\1\177\22\14\3\0\1\14\7\0\3\14\15\0\17\14"+
    "\1\200\4\14\3\0\1\14\7\0\3\14\15\0\11\14"+
    "\1\201\12\14\3\0\1\14\7\0\3\14\15\0\23\14"+
    "\1\202\3\0\1\14\7\0\3\14\15\0\1\14\1\203"+
    "\22\14\3\0\1\14\7\0\3\14\15\0\13\14\1\204"+
    "\10\14\3\0\1\14\7\0\3\14\15\0\7\14\1\205"+
    "\14\14\3\0\1\14\7\0\3\14\15\0\1\206\23\14"+
    "\3\0\1\14\7\0\3\14\15\0\6\14\1\207\15\14"+
    "\3\0\1\14\7\0\3\14\15\0\1\14\1\210\22\14"+
    "\3\0\1\14\7\0\3\14\15\0\6\14\1\211\15\14"+
    "\3\0\1\14\7\0\3\14\15\0\13\14\1\212\10\14"+
    "\3\0\1\14\7\0\3\14\15\0\16\14\1\213\5\14"+
    "\3\0\1\14\7\0\3\14\15\0\10\14\1\214\13\14"+
    "\3\0\1\14\7\0\3\14\15\0\7\14\1\215\14\14"+
    "\3\0\1\14\7\0\3\14\15\0\17\14\1\216\4\14"+
    "\3\0\1\14\7\0\3\14\15\0\12\14\1\217\11\14"+
    "\3\0\1\14\7\0\3\14\15\0\11\14\1\220\12\14"+
    "\3\0\1\14\7\0\3\14\15\0\11\14\1\221\12\14"+
    "\3\0\1\14\7\0\3\14\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4371];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\22\1\10\11\1\1\11\11\1\1"+
    "\2\11\33\1\3\11\1\0\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	Writer writer = null;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
  	try {
	    writer = new BufferedWriter(new OutputStreamWriter(
	          new FileOutputStream("tokens.txt"), "utf-8"));
	} catch (IOException ex) {
		System.out.println(ex.getMessage());
	}
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {writer.close();} catch (Exception e) {System.out.println(e.getMessage());}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 60: break;
        case 2: 
          { writer.write("Token found: " + yytext() + " is a ERROR");
          }
        case 61: break;
        case 3: 
          { writer.write("Token found: " + yytext() + " is a IDENTIFICADOR");
          }
        case 62: break;
        case 4: 
          { writer.write("Token found: " + yytext() + " is a MAYOR");
          }
        case 63: break;
        case 5: 
          { writer.write("Token found: " + yytext() + " is a MENOR");
          }
        case 64: break;
        case 6: 
          { writer.write("Token found: " + yytext() + " is a ASIG");
          }
        case 65: break;
        case 7: 
          { writer.write("Token found: " + yytext() + " is a MAS");
          }
        case 66: break;
        case 8: 
          { writer.write("Token found: " + yytext() + " is a MENOS");
          }
        case 67: break;
        case 9: 
          { writer.write("Token found: " + yytext() + " is a POR");
          }
        case 68: break;
        case 10: 
          { writer.write("Token found: " + yytext() + " is a ENTRE");
          }
        case 69: break;
        case 11: 
          { writer.write("Token found: " + yytext() + " is a NOT");
          }
        case 70: break;
        case 12: 
          { writer.write("Token found: " + yytext() + " is a MOD");
          }
        case 71: break;
        case 13: 
          { writer.write("Token found: " + yytext() + " is a PUNTO");
          }
        case 72: break;
        case 14: 
          { writer.write("Token found: " + yytext() + " is a NUMERO");
          }
        case 73: break;
        case 15: 
          { writer.write("Token found: " + yytext() + " is a ESPACIO");
          }
        case 74: break;
        case 16: 
          { writer.write("Token found: " + yytext() + " is a LLAVEIZQ");
          }
        case 75: break;
        case 17: 
          { writer.write("Token found: " + yytext() + " is a PARIZQ");
          }
        case 76: break;
        case 18: 
          { writer.write("Token found: " + yytext() + " is a PARDER");
          }
        case 77: break;
        case 19: 
          { writer.write("Token found: " + yytext() + " is a COMA");
          }
        case 78: break;
        case 20: 
          { writer.write("Token found: " + yytext() + " is a PUNTOCOMA");
          }
        case 79: break;
        case 21: 
          { writer.write("Token found: " + yytext() + " is a COMILLA");
          }
        case 80: break;
        case 22: 
          { writer.write("Token found: " + yytext() + " is a SIGNOINTERROGACION");
          }
        case 81: break;
        case 23: 
          { writer.write("Token found: " + yytext() + " is a UNACOMILLA");
          }
        case 82: break;
        case 24: 
          { yyline++;
          }
        case 83: break;
        case 25: 
          { yybegin (YYINITIAL);
          }
        case 84: break;
        case 26: 
          { writer.write("Token found: " + yytext() + " is a DO");
          }
        case 85: break;
        case 27: 
          { writer.write("Token found: " + yytext() + " is a OR");
          }
        case 86: break;
        case 28: 
          { writer.write("Token found: " + yytext() + " is a IF");
          }
        case 87: break;
        case 29: 
          { writer.write("Token found: " + yytext() + " is a MAYORIGUAL");
          }
        case 88: break;
        case 30: 
          { writer.write("Token found: " + yytext() + " is a DISTINTO");
          }
        case 89: break;
        case 31: 
          { writer.write("Token found: " + yytext() + " is a MENORIGUAL");
          }
        case 90: break;
        case 32: 
          { writer.write("Token found: " + yytext() + " is a AND");
          }
        case 91: break;
        case 33: 
          { writer.write("Token found: " + yytext() + " is a NEW");
          }
        case 92: break;
        case 34: 
          { writer.write("Token found: " + yytext() + " is a FOR");
          }
        case 93: break;
        case 35: 
          { writer.write("Token found: " + yytext() + " is a INY");
          }
        case 94: break;
        case 36: 
          { writer.write("Token found: " + yytext() + " is a END");
          }
        case 95: break;
        case 37: 
          { writer.write("Token found: " + yytext() + " is a REAL");
          }
        case 96: break;
        case 38: 
          { writer.write("Token found: " + yytext() + " is a TRUE");
          }
        case 97: break;
        case 39: 
          { writer.write("Token found: " + yytext() + " is a THEN");
          }
        case 98: break;
        case 40: 
          { writer.write("Token found: " + yytext() + " is a ELSE");
          }
        case 99: break;
        case 41: 
          { writer.write("Token found: " + yytext() + " is a BOOLEAN");
          }
        case 100: break;
        case 42: 
          { writer.write("Token found: " + yytext() + " is a CASE");
          }
        case 101: break;
        case 43: 
          { writer.write("Token found: " + yytext() + " is a CHAR");
          }
        case 102: break;
        case 44: 
          { writer.write("Token found: " + yytext() + " is a VOID");
          }
        case 103: break;
        case 45: 
          { writer.write("Token found: " + yytext() + " is a FALSE");
          }
        case 104: break;
        case 46: 
          { writer.write("Token found: " + yytext() + " is a FLOAT");
          }
        case 105: break;
        case 47: 
          { writer.write("Token found: " + yytext() + " is a ENDIF");
          }
        case 106: break;
        case 48: 
          { writer.write("Token found: " + yytext() + " is a WHILE");
          }
        case 107: break;
        case 49: 
          { writer.write("Token found: " + yytext() + " is a BREAK");
          }
        case 108: break;
        case 50: 
          { writer.write("Token found: " + yytext() + " is a BEGIN");
          }
        case 109: break;
        case 51: 
          { writer.write("Token found: " + yytext() + " is a CLASS");
          }
        case 110: break;
        case 52: 
          { writer.write("Token found: " + yytext() + " is a PRINT");
          }
        case 111: break;
        case 53: 
          { writer.write("Token found: " + yytext() + " is a RETURN");
          }
        case 112: break;
        case 54: 
          { writer.write("Token found: " + yytext() + " is a IGUAL");
          }
        case 113: break;
        case 55: 
          { writer.write("Token found: " + yytext() + " is a STRING");
          }
        case 114: break;
        case 56: 
          { writer.write("Token found: " + yytext() + " is a SWITCH");
          }
        case 115: break;
        case 57: 
          { writer.write("Token found: " + yytext() + " is a PUBLIC");
          }
        case 116: break;
        case 58: 
          { writer.write("Token found: " + yytext() + " is a PRIVATE");
          }
        case 117: break;
        case 59: 
          { writer.write("Token found: " + yytext() + " is a ENDWHILE");
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
